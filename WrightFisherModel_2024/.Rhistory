for (i in 1:length(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query)) {
query_name <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[i]
target_name <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[i]
match_name <- paste(query_name, target_name)
if(!is.element(match_name,match_vec)){
Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs[query_name] <- Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs[query_name] + Mass_cog_all_gene_freqs_dict[target_name]
match_vec <- append(match_vec, match_name)
if(is.element(query_name,once)){
more_than_once <- append(query_name, more_than_once)
}
if(is.element(target_name,once)){
more_than_once <- append(target_name, more_than_once)
}
once <- append(query_name, once)
once <- append(target_name, once)
}
}
more_than_once
Mass_ggC_all_gene_freqs_dict_with_matches["ERS044030_02273~~~ERS044161_02347"]
Mass_ggC_all_gene_freqs_dict_with_matches[AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[49959]]
AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[49959]
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == "CLS01053")
Mass_ggC_all_gene_freqs_dict_with_matches[AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[2236]]
Mass_cog_all_gene_freqs_dict["CLS01053"]
intersect(which(Mass_ggC_all_gene_freqs_dict_with_matches > 0.9), which(Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs < 0.2)
)
Mass_ggC_all_gene_freqs_dict_with_matches[c(27,248,481,540,1091,1464,1599,2039)]
Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs[c(27,248,481,540,1091,1464,1599,2039)]
View(AllMatches_MassCOGinggC_hq_seqlen_alnlen)
plot(Mass_ggC_all_gene_freqs_dict_with_matches, Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs, pch = 19)
head(Mass_ggC_all_gene_freqs_dict_with_matches)
head(Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs)
length(which(abs(Mass_ggC_all_gene_freqs_dict_with_matches - Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs)>0.1))
length(which(abs(Mass_ggC_all_gene_freqs_dict_with_matches - Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs)<=0.1))
plot(Mass_ggC_all_gene_freqs_dict_with_matches, Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs, pch = 19, col = "#00000050")
plot(Mass_ggC_all_gene_freqs_dict_with_matches, Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs, pch = 19, col = "#00000030")
length(which(abs(Mass_ggC_all_gene_freqs_dict_with_matches - Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs)>0.05))
# 69
length(which(abs(Mass_ggC_all_gene_freqs_dict_with_matches - Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs)<=0.05))
2065/(106 + 2065)
# Let's compare this across datasets!
filter_matches <- function(AllMatches_data){
AllMatches_data_hq <- AllMatches_data[which(AllMatches_data$fident >= 0.95),]
# keep only matches that have a squence identity of at least 0.95
AllMatches_data_hq_seqlen <- AllMatches_data_hq[intersect(which(AllMatches_data_hq$qlen/AllMatches_data_hq$tlen >= 0.8), which(AllMatches_data_hq$tlen/AllMatches_data_hq$qlen >= 0.8))]
# keep only matches that are within 80% of each others sequence length
AllMatches_data_hq_seqlen_alnlen <- AllMatches_data_hq_seqlen[intersect(which(AllMatches_data_hq_seqlen$alnlen/AllMatches_data_hq_seqlen$qlen >= 0.8), which(AllMatches_data_hq_seqlen$alnlen/AllMatches_data_hq_seqlen$tlen >= 0.8))]
# keep only matches of which at least 80% of the sequences are matched (this removes the high-quality but really short matches)
AllMatches_data_hq_seqlen_alnlen
}
# Mass vs UK
AllMatches_MassInUK <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/AllMatches_MassInUK/MassInUK_AllMatches", header=TRUE)
AllMatches_UKinMass <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/AllMatches_UKinMass/UKinMass_AllMatches", header=TRUE)
# filter them:
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK)
View(AllMatches_MassInUK)
# Let's compare this across datasets!
filter_matches <- function(AllMatches_data){
AllMatches_data_hq <- AllMatches_data[which(AllMatches_data$fident >= 0.95),]
# keep only matches that have a squence identity of at least 0.95
AllMatches_data_hq_seqlen <- AllMatches_data_hq[intersect(which(AllMatches_data_hq$qlen/AllMatches_data_hq$tlen >= 0.8), which(AllMatches_data_hq$tlen/AllMatches_data_hq$qlen >= 0.8)),]
# keep only matches that are within 80% of each others sequence length
AllMatches_data_hq_seqlen_alnlen <- AllMatches_data_hq_seqlen[intersect(which(AllMatches_data_hq_seqlen$alnlen/AllMatches_data_hq_seqlen$qlen >= 0.8), which(AllMatches_data_hq_seqlen$alnlen/AllMatches_data_hq_seqlen$tlen >= 0.8)),]
# keep only matches of which at least 80% of the sequences are matched (this removes the high-quality but really short matches)
AllMatches_data_hq_seqlen_alnlen
}
# filter them:
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK)
AllMatches_UKinMass_filtered <- filter_matches(AllMatches_UKinMass)
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query), unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target))
removed_items <- c()
global_gene_clusters <- list()
append(global_gene_clusters, [1,2,3])
append(global_gene_clusters, list(1,2,3))
append(append(global_gene_clusters, list(1,2,3))), list(4,4,4))
append(append(global_gene_clusters, list(1,2,3)), list(4,4,4))
global_gene_clusters <- list()
list(global_gene_clusters, list(1,2,3))
list(list(1,2,3),list(4,4,4))
list(c(1,2,3),c(4,4,4))
append(list(c(1,2,3),c(4,4,4)), c(5,5,5))
list(list(c(1,2,3),c(4,4,4)), c(5,5,5))
global_gene_clusters <- list(list(c(1,2,3),c(4,4,4)), c(5,5,5))
global_gene_clusters
global_gene_clusters <- list((c(1,2,3),c(4,4,4)), c(5,5,5))
global_gene_clusters <- list(c(1,2,3),c(4,4,4), c(5,5,5))
global_gene_clusters
global_gene_clusters[[4]] <- c(6,5,6)
global_gene_clusters
c(1)
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query), unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
head(AllGenesMass_COGggC$query)
head(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query)
which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == "ERS043903_01087")
AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == "ERS043903_01087")]
AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == "ERS043903_01087")] == "CLS00681")]
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == "ERS043944_02083")] == "CLS02659")]
which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == "ERS043944_02083")
AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == "ERS043944_02083")]
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_genes <- c(curr_gene, local_matches, local_re_matches)
#for (j in 1:length(local_matches)) {
#  match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[local_matches[j]]
#  local_genes <- c(local_genes, match_gene)
#  match_match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)]
#}
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
removed_items <- append(removed_items, curr_gene, local_re_matches)
}
}
is.element(curr_gene, removed_items)
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_genes <- c(curr_gene, local_matches, local_re_matches)
#for (j in 1:length(local_matches)) {
#  match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[local_matches[j]]
#  local_genes <- c(local_genes, match_gene)
#  match_match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)]
#}
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
removed_items <- append(removed_items, curr_gene, local_re_matches)
i_help <- i_help +1
}
}
if(!is.element(1, c(2,3))){print("hello")}
AllGenesMass_COGggC[1]
if(!is.element("ERS043903_01087", c())){print("hello")}
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
print(curr_gene)
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_genes <- c(curr_gene, local_matches, local_re_matches)
#for (j in 1:length(local_matches)) {
#  match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[local_matches[j]]
#  local_genes <- c(local_genes, match_gene)
#  match_match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)]
#}
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
removed_items <- append(removed_items, curr_gene, local_re_matches)
i_help <- i_help +1
}
}
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
if(!is.element(AllGenesMass_COGggC[1], removed_items)){print("hello")}
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
print(curr_gene)
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
print("hello")
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_genes <- c(curr_gene, local_matches, local_re_matches)
#for (j in 1:length(local_matches)) {
#  match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[local_matches[j]]
#  local_genes <- c(local_genes, match_gene)
#  match_match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)]
#}
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
removed_items <- append(removed_items, curr_gene, local_re_matches)
i_help <- i_help +1
}
}
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
print(curr_gene)
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_genes <- c(curr_gene, local_matches, local_re_matches)
print("hello")
#for (j in 1:length(local_matches)) {
#  match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[local_matches[j]]
#  local_genes <- c(local_genes, match_gene)
#  match_match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)]
#}
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
removed_items <- append(removed_items, curr_gene, local_re_matches)
i_help <- i_help +1
}
}
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
print(curr_gene)
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_genes <- c(curr_gene, local_matches, local_re_matches)
#for (j in 1:length(local_matches)) {
#  match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[local_matches[j]]
#  local_genes <- c(local_genes, match_gene)
#  match_match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)]
#}
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
print("hello")
removed_items <- append(removed_items, curr_gene, local_re_matches)
i_help <- i_help +1
}
}
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
print(curr_gene)
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_genes <- c(curr_gene, local_matches, local_re_matches)
#for (j in 1:length(local_matches)) {
#  match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[local_matches[j]]
#  local_genes <- c(local_genes, match_gene)
#  match_match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)]
#}
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
removed_items <- append(removed_items, curr_gene, local_re_matches)
print("hello")
i_help <- i_help +1
}
}
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
print(curr_gene)
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_genes <- c(curr_gene, local_matches, local_re_matches)
#for (j in 1:length(local_matches)) {
#  match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[local_matches[j]]
#  local_genes <- c(local_genes, match_gene)
#  match_match_gene <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)]
#}
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
warnings()
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
length(global_gene_clusters)
global_gene_clusters[[1]]
global_gene_clusters[[2]]
global_gene_clusters[[3]]
global_gene_clusters[[4]]
global_gene_clusters[[5]]
# print cluster sizes
cluster_sizes <- 0
# print cluster sizes
cluster_sizes <- rep(0, length(global_gene_clusters))
# print cluster sizes
cluster_sizes <- rep(0, length(global_gene_clusters))
for (i in 1:length(global_gene_clusters)) {
cluster_sizes[i] <- length(global_gene_clusters[[i]])
}
cluster_sizes
max(cluster_sizes)
which(cluster_sizes == 4)
global_gene_clusters[[376]]
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
global_gene_clusters_ggC <- list()
global_gene_clusters_COG <- list()
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
global_gene_clusters_ggC[[i_help]] <- c(curr_gene, local_re_matches)
global_gene_clusters_COG[[i_help]] <- c(local_matches)
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
head(global_gene_clusters_ggC)
#compute gene freqs
global_gene_clusters_ggC_freqs <- rep(0, length(cluster_sizes))
head(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC])
head(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC[[1]]])
sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC[[1]]])
# try mapping back and forth to form new clusters
AllGenesMass_COGggC <- c(unique(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query))
removed_items <- c()
i_help <- 1
global_gene_clusters <- list()
global_gene_clusters_ggC <- list()
global_gene_clusters_COG <- list()
for (i in 1:length(AllGenesMass_COGggC)) {
curr_gene <- AllGenesMass_COGggC[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$target[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters[[i_help]] <- local_genes
global_gene_clusters_ggC[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_COG[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC[[1]]])
#compute gene freqs
global_gene_clusters_ggC_freqs <- rep(0, length(cluster_sizes))
global_gene_clusters_COG_freqs <- rep(0, length(cluster_sizes))
for (i in 1:length(cluster_sizes)) {
global_gene_clusters_ggC_freqs[i] <- sum(global_gene_clusters_ggC[[i]])
global_gene_clusters_COG_freqs[i] <- sum(global_gene_clusters_COG[[i]])
}
#compute gene freqs
global_gene_clusters_ggC_freqs <- rep(0, length(cluster_sizes))
global_gene_clusters_COG_freqs <- rep(0, length(cluster_sizes))
for (i in 1:length(cluster_sizes)) {
global_gene_clusters_ggC_freqs[i] <- sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC[[i]]])
global_gene_clusters_COG_freqs[i] <- sum(Mass_COG_all_gene_freqs_dict[global_gene_clusters_COG[[i]]])
}
#compute gene freqs
global_gene_clusters_ggC_freqs <- rep(0, length(cluster_sizes))
global_gene_clusters_COG_freqs <- rep(0, length(cluster_sizes))
for (i in 1:length(cluster_sizes)) {
global_gene_clusters_ggC_freqs[i] <- sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC[[i]]])
global_gene_clusters_COG_freqs[i] <- sum(Mass_cog_all_gene_freqs_dict[global_gene_clusters_COG[[i]]])
}
head(global_gene_clusters_ggC_freqs)
head(global_gene_clusters_COG_freqs)
#plot them!
plot(global_gene_clusters_ggC_freqs, global_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity")
abline(0,1)
which(global_gene_clusters_ggC_freqs > 1)
global_gene_clusters_ggC[[49]]
Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC[[49]]]
Mass_cog_all_gene_freqs_dict[global_gene_clusters_COG[[49]]]
#compute gene freqs
global_gene_clusters_ggC_freqs <- rep(0, length(cluster_sizes))
global_gene_clusters_COG_freqs <- rep(0, length(cluster_sizes))
for (i in 1:length(cluster_sizes)) {
global_gene_clusters_ggC_freqs[i] <- max(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_COG_freqs[i] <- max(1,sum(Mass_cog_all_gene_freqs_dict[global_gene_clusters_COG[[i]]]))
}
#plot them!
plot(global_gene_clusters_ggC_freqs, global_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity")
#compute gene freqs
global_gene_clusters_ggC_freqs <- rep(0, length(cluster_sizes))
global_gene_clusters_COG_freqs <- rep(0, length(cluster_sizes))
for (i in 1:length(cluster_sizes)) {
global_gene_clusters_ggC_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_ggC[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_COG_freqs[i] <- min(1,sum(Mass_cog_all_gene_freqs_dict[global_gene_clusters_COG[[i]]]))
}
#plot them!
plot(global_gene_clusters_ggC_freqs, global_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity")
abline(0,1)
# 2065
# so most of them are actually within +-5%
# most of them ~ >95%
# this might be good enough?
plot(Mass_ggC_all_gene_freqs_dict_with_matches, Mass_ggC_all_gene_freqs_dict_with_matches_matchfreqs, pch = 19, col = "#00000030")
plot(global_gene_clusters_ggC_freqs, global_gene_clusters_COG_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_ggC_freqs - global_gene_clusters_COG_freqs)>0.05))
# 85
length(which(abs(global_gene_clusters_ggC_freqs - global_gene_clusters_COG_freqs)<=0.05))
85/2050
2000 * 0.05
create_global_clusters <- function(AllMatches_data){
AllGenesMass <- c(unique(AllMatches_data$query))
removed_items <- c()
i_help <- 1
global_gene_clusters_both <- list()
global_gene_clusters_a <- list()
global_gene_clusters_b <- list()
for (i in 1:length(AllGenesMass)) {
curr_gene <- AllGenesMass[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_data$target[which(AllMatches_data$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_data$query[which(AllMatches_data$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters_both[[i_help]] <- local_genes
global_gene_clusters_a[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_b[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
return(list(global_gene_clusters_both, global_gene_clusters_a, global_gene_clusters_b))
}
# create cluster for Mass-UK
list(global_gene_clusters_Mass_UK, global_gene_clusters_Mass, global_gene_clusters_UK) <- create_global_clusters(AllMatches_MassInUK_filtered)
# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
head(global_clusters_return_Mass_UK)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
global_gene_clusters_Mass_UK[[1]]
global_gene_clusters_Mass[[1]]
global_gene_clusters_UK[[1]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
head(global_gene_clusters_Mass_freqs)
head(global_gene_clusters_UK_freqs)
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 85
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
2381/(760 + 2381)
