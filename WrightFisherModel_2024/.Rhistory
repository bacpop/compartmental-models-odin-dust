#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), 0.1))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", runif(n=1, min=0, max=1), min = 0, max = 1), mcstate::pmcmc_parameter("m", runif(n=1, min=-10, max=0), min = -1000, max = 0), mcstate::pmcmc_parameter("v", runif(n=1, min=0, max=1), min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
# new with cov-mode 1
AllMatches_MassInUK_covmode1 <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/AllMatches_MassInUK_covmode1/MassInUK_AllMatches", header=TRUE)
head(AllMatches_MassInUK_covmode1)
View(AllMatches_MassInUK_covmode1)
# Mass vs UK
AllMatches_MassInUK <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/AllMatches_MassInUK/MassInUK_AllMatches", header=TRUE)
View(AllMatches_MassInUK)
View(AllMatches_MassInUK)
# filter matches just by best (which is the first match)
filter_matches_v2 <- function(AllMatches_data){
Best1on1Matches <- AllMatches_data[1,]
old_query <- AllMatches_data$query[1]
old_target <- AllMatches_data$target[1]
new_idx <- 1
for (i in 1:nrow(AllMatches_data)) {
curr_query <- AllMatches_data$query[i]
curr_target <- AllMatches_data$target[i]
if(curr_query != old_query | curr_target != old_target){
new_idx <- new_idx + 1
Best1on1Matches[new_idx,] <- AllMatches_data[i,]
}
old_query <- AllMatches_data$query[i]
old_target <- AllMatches_data$target[i]
}
}
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1)
View(AllMatches_MassInUK_covmode1_Best1on1)
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1[1:100,])
View(AllMatches_MassInUK_covmode1_Best1on1)
# new with cov-mode 1
AllMatches_MassInUK_covmode1 <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/AllMatches_MassInUK_covmode1/MassInUK_AllMatches", header=TRUE)
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1[1:100,])
View(AllMatches_MassInUK_covmode1_Best1on1)
# filter matches just by best (which is the first match)
filter_matches_v2 <- function(AllMatches_data){
Best1on1Matches <- as.data.frame(AllMatches_data[1,])
old_query <- AllMatches_data$query[1]
old_target <- AllMatches_data$target[1]
new_idx <- 1
for (i in 1:nrow(AllMatches_data)) {
curr_query <- AllMatches_data$query[i]
curr_target <- AllMatches_data$target[i]
if(curr_query != old_query | curr_target != old_target){
new_idx <- new_idx + 1
Best1on1Matches[new_idx,] <- AllMatches_data[i,]
}
old_query <- AllMatches_data$query[i]
old_target <- AllMatches_data$target[i]
}
}
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1[1:100,])
View(AllMatches_MassInUK_covmode1_Best1on1)
test_df <- AllMatches_MassInUK_covmode1[1,]
View(test_df)
test_df[2,] <- AllMatches_MassInUK_covmode1[10,]
# filter matches just by best (which is the first match)
filter_matches_v2 <- function(AllMatches_data){
Best1on1Matches <- as.data.frame(AllMatches_data[1,])
old_query <- AllMatches_data$query[1]
old_target <- AllMatches_data$target[1]
new_idx <- 1
for (i in 1:nrow(AllMatches_data)) {
curr_query <- AllMatches_data$query[i]
curr_target <- AllMatches_data$target[i]
if(curr_query != old_query | curr_target != old_target){
print("hello")
new_idx <- new_idx + 1
Best1on1Matches[new_idx,] <- AllMatches_data[i,]
}
old_query <- AllMatches_data$query[i]
old_target <- AllMatches_data$target[i]
}
}
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1[1:100,])
# filter matches just by best (which is the first match)
filter_matches_v2 <- function(AllMatches_data){
Best1on1Matches <- as.data.frame(AllMatches_data[1,])
old_query <- AllMatches_data$query[1]
old_target <- AllMatches_data$target[1]
new_idx <- 1
for (i in 1:nrow(AllMatches_data)) {
curr_query <- AllMatches_data$query[i]
curr_target <- AllMatches_data$target[i]
if(curr_query != old_query | curr_target != old_target){
print("hello")
new_idx <- new_idx + 1
print(AllMatches_data[i,])
Best1on1Matches[new_idx,] <- AllMatches_data[i,]
}
old_query <- AllMatches_data$query[i]
old_target <- AllMatches_data$target[i]
}
}
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1[1:100,])
# filter matches just by best (which is the first match)
filter_matches_v2 <- function(AllMatches_data){
Best1on1Matches <- as.data.frame(AllMatches_data[1,])
old_query <- AllMatches_data$query[1]
old_target <- AllMatches_data$target[1]
new_idx <- 1
for (i in 1:nrow(AllMatches_data)) {
curr_query <- AllMatches_data$query[i]
curr_target <- AllMatches_data$target[i]
if(curr_query != old_query | curr_target != old_target){
new_idx <- new_idx + 1
Best1on1Matches[new_idx,] <- AllMatches_data[i,]
}
old_query <- AllMatches_data$query[i]
old_target <- AllMatches_data$target[i]
}
Best1on1Matches
}
# new with cov-mode 1
AllMatches_MassInUK_covmode1 <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/AllMatches_MassInUK_covmode1/MassInUK_AllMatches", header=TRUE)
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1[1:100,])
View(AllMatches_MassInUK_covmode1_Best1on1)
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1)
View(AllMatches_MassInUK_covmode1_Best1on1)
nrow(AllMatches_MassInUK_covmode1)
nrow(AllMatches_MassInUK_covmode1_Best1on1)
AllMatches_MassInUK_covmode1_Best1on1_fident <- AllMatches_MassInUK_covmode1_Best1on1[which(AllMatches_MassInUK_covmode1_Best1on1$fident >= 0.7),]
View(AllMatches_MassInUK_covmode1_Best1on1_fident)
nrow(AllMatches_MassInUK_covmode1_Best1on1_fident)
AllMatches_MassInUK_covmode1_Best1on1_fident[1,2]
AllMatches_MassInUK_covmode1_Best1on1_fident[2,2]
AllMatches_MassInUK_covmode1_Best1on1_fident[3,2]
# new with cov-mode 1
AllMatches_MassInUK_covmode1 <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/MMseqs2_results/AllMatches_MassInUK_covmode1/MassInUK_AllMatches", header=TRUE)
AllMatches_MassInUK_covmode1_fident70 <- AllMatches_MassInUK_covmode1[which(AllMatches_MassInUK_covmode1$fident >= 0.7),]
nrow(AllMatches_MassInUK_covmode1_fident70)
AllMatches_MassInUK_covmode1_Best1on1 <- filter_matches_v2(AllMatches_MassInUK_covmode1_fident70)
# 4-parameter model GPSC
# and now with winter assignment
Navajo_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2025_01_21/Navajo_winter/Navajo_PPxSero2vacc_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Navajo_4param_mcmc2_probs <- coda::as.mcmc(cbind(Navajo_4param_mcmc2$probabilities, Navajo_4param_mcmc2$pars))
#coda::effectiveSize(Navajo_4param_mcmc2_probs)
#summary(coda::as.mcmc(Navajo_4param_mcmc2_probs))
Navajo_likelihood_4param <- median(Navajo_4param_mcmc2_probs[,"log_likelihood"])
#mean(Navajo_4param_mcmc2_probs[,"log_likelihood"])
param_mean <- apply(Navajo_4param_mcmc2_probs, 2, mean)
percentile95_low <- apply(Navajo_4param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Navajo_4param_mcmc2_probs,2,quantile,.975)
param_mean
percentile95_low
percentile95_up
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#     0.0000000   -862.1327737   -862.1327737     -4.9293875      0.9293230     -2.7939285      0.1896163
#     0.00000000  -866.25290628  -866.25290628    -5.48570053     0.72694992    -3.13584575     0.09774486
#     0.0000000   -860.0060398   -860.0060398     -4.3237886      0.9975610     -2.4308551      0.3520862
rm(Navajo_4param_mcmc2)
# 4-parameter model GPSC
# and winter
Nepal_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2025_01_21/Nepal_winter/Nepal_PPxSero_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
Nepal_4param_mcmc2_probs <- coda::as.mcmc(cbind(Nepal_4param_mcmc2$probabilities, Nepal_4param_mcmc2$pars))
#coda::effectiveSize(Nepal_4param_mcmc2_probs)
#summary(coda::as.mcmc(Nepal_4param_mcmc2_probs))
Nepal_likelihood_4param <- median(Nepal_4param_mcmc2_probs[,"log_likelihood"])
#mean(Nepal_4param_mcmc2_probs[,"log_likelihood"])
param_estimates <- map_estimate(Nepal_4param_mcmc2$pars)
param_mean <- apply(Nepal_4param_mcmc2_probs, 2, mean)
percentile95_low <- apply(Nepal_4param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Nepal_4param_mcmc2_probs,2,quantile,.975)
param_mean
percentile95_low <- apply(Nepal_4param_mcmc2_probs,2,quantile,.025)
percentile95_up <- apply(Nepal_4param_mcmc2_probs,2,quantile,.975)
percentile95_low
percentile95_up
-2.794504e+03
-2.801638e+03
-2.791667e+03
-2.381981e+00
3.565618e-01
3.495622e-01
4.343989e-01
2.693263e-02
2.244008e-03
7.172079e-02
#     log_prior log_likelihood  log_posterior        sigma_f         prop_f              m              v
#  0.000000e+00  -2.794504e+03  -2.794504e+03  -2.381981e+00   3.565618e-01  -2.525765e+00   2.693263e-02
#  0.000000e+00  -2.801638e+03  -2.801638e+03  -2.922157e+00   3.495622e-01  -3.000324e+00   2.244008e-03
#  0.000000e+00  -2.791667e+03  -2.791667e+03  -1.639195e+00   4.343989e-01  -1.903038e+00   7.172079e-02
rm(Nepal_4param_mcmc2)
### find best filtering values
# tradeoff btw high quality matches vs having genes that do not match at all
# 1) 0.95, 0.8, 0.8
# 2) 0.9, 0.75, 0.75
# 3) 0.95, 0.25
# Let's compare this across datasets!
filter_matches <- function(AllMatches_data, fident_filter = 0.95, len_filter = 0.8){
AllMatches_data_hq <- AllMatches_data[which(AllMatches_data$fident >= fident_filter),]
# keep only matches that have a squence identity of at least 0.95
AllMatches_data_hq_seqlen <- AllMatches_data_hq[intersect(which(AllMatches_data_hq$qlen/AllMatches_data_hq$tlen >= len_filter), which(AllMatches_data_hq$tlen/AllMatches_data_hq$qlen >= len_filter)),]
# keep only matches that are within 80% of each others sequence length
AllMatches_data_hq_seqlen_alnlen <- AllMatches_data_hq_seqlen[intersect(which(AllMatches_data_hq_seqlen$alnlen/AllMatches_data_hq_seqlen$qlen >= len_filter), which(AllMatches_data_hq_seqlen$alnlen/AllMatches_data_hq_seqlen$tlen >= len_filter)),]
# keep only matches of which at least 80% of the sequences are matched (this removes the high-quality but really short matches)
AllMatches_data_hq_seqlen_alnlen
}
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK, fident_filter = 0.95, len_filter = 0.8)
AllMatches_UKinMass_filtered <- filter_matches(AllMatches_UKinMass, fident_filter = 0.95, len_filter = 0.8)
create_global_clusters <- function(AllMatches_data){
AllGenesMass <- c(unique(AllMatches_data$query))
removed_items <- c()
i_help <- 1
global_gene_clusters_both <- list()
global_gene_clusters_a <- list()
global_gene_clusters_b <- list()
for (i in 1:length(AllGenesMass)) {
curr_gene <- AllGenesMass[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_data$target[which(AllMatches_data$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_data$query[which(AllMatches_data$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters_both[[i_help]] <- local_genes
global_gene_clusters_a[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_b[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
return(list(global_gene_clusters_both, global_gene_clusters_a, global_gene_clusters_b))
}
# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 760
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
# colour them in by NFDS
global_gene_clusters_Mass_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_NFDS[i] <- min(1, sum(Mass_underNFDS[global_gene_clusters_Mass[[i]]]))
global_gene_clusters_UK_NFDS[i] <- min(1, sum(UK_underNFDS[global_gene_clusters_UK[[i]]]))
}
colours_global_gene_UKMass_95 <- rep("grey", length(global_gene_clusters_Mass_freqs))
colours_global_gene_UKMass_95[which(global_gene_clusters_UK_NFDS==1)] <- col_clb[2]
colours_global_gene_UKMass_95[which(global_gene_clusters_Mass_NFDS==1)] <- col_clb[3]
colours_global_gene_UKMass_95[intersect(which(global_gene_clusters_UK_NFDS==1),which(global_gene_clusters_Mass_NFDS==1))] <- col_clb[8]
par(pty="s")
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = colours_global_gene_UKMass_95)
length(which(colours_global_gene_UKMass_95 == col_clb[2]))
# 161
length(which(colours_global_gene_UKMass_95 == col_clb[3]))
# 218
length(which(colours_global_gene_UKMass_95 == col_clb[8]))
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK, fident_filter = 0.95, len_filter = 0.4)
AllMatches_UKinMass_filtered <- filter_matches(AllMatches_UKinMass, fident_filter = 0.95, len_filter = 0.4)
create_global_clusters <- function(AllMatches_data){
AllGenesMass <- c(unique(AllMatches_data$query))
removed_items <- c()
i_help <- 1
global_gene_clusters_both <- list()
global_gene_clusters_a <- list()
global_gene_clusters_b <- list()
for (i in 1:length(AllGenesMass)) {
curr_gene <- AllGenesMass[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_data$target[which(AllMatches_data$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_data$query[which(AllMatches_data$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters_both[[i_help]] <- local_genes
global_gene_clusters_a[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_b[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
return(list(global_gene_clusters_both, global_gene_clusters_a, global_gene_clusters_b))
}
# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 760
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
# colour them in by NFDS
global_gene_clusters_Mass_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_NFDS[i] <- min(1, sum(Mass_underNFDS[global_gene_clusters_Mass[[i]]]))
global_gene_clusters_UK_NFDS[i] <- min(1, sum(UK_underNFDS[global_gene_clusters_UK[[i]]]))
}
colours_global_gene_UKMass_95 <- rep("grey", length(global_gene_clusters_Mass_freqs))
colours_global_gene_UKMass_95[which(global_gene_clusters_UK_NFDS==1)] <- col_clb[2]
colours_global_gene_UKMass_95[which(global_gene_clusters_Mass_NFDS==1)] <- col_clb[3]
colours_global_gene_UKMass_95[intersect(which(global_gene_clusters_UK_NFDS==1),which(global_gene_clusters_Mass_NFDS==1))] <- col_clb[8]
par(pty="s")
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = colours_global_gene_UKMass_95)
length(which(colours_global_gene_UKMass_95 == col_clb[2]))
# 161
length(which(colours_global_gene_UKMass_95 == col_clb[3]))
# 218
length(which(colours_global_gene_UKMass_95 == col_clb[8]))
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK, fident_filter = 0.95, len_filter = 0.2)
AllMatches_UKinMass_filtered <- filter_matches(AllMatches_UKinMass, fident_filter = 0.95, len_filter = 0.2)
create_global_clusters <- function(AllMatches_data){
AllGenesMass <- c(unique(AllMatches_data$query))
removed_items <- c()
i_help <- 1
global_gene_clusters_both <- list()
global_gene_clusters_a <- list()
global_gene_clusters_b <- list()
for (i in 1:length(AllGenesMass)) {
curr_gene <- AllGenesMass[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_data$target[which(AllMatches_data$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_data$query[which(AllMatches_data$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters_both[[i_help]] <- local_genes
global_gene_clusters_a[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_b[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
return(list(global_gene_clusters_both, global_gene_clusters_a, global_gene_clusters_b))
}
# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 760
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
# colour them in by NFDS
global_gene_clusters_Mass_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_NFDS[i] <- min(1, sum(Mass_underNFDS[global_gene_clusters_Mass[[i]]]))
global_gene_clusters_UK_NFDS[i] <- min(1, sum(UK_underNFDS[global_gene_clusters_UK[[i]]]))
}
colours_global_gene_UKMass_95 <- rep("grey", length(global_gene_clusters_Mass_freqs))
colours_global_gene_UKMass_95[which(global_gene_clusters_UK_NFDS==1)] <- col_clb[2]
colours_global_gene_UKMass_95[which(global_gene_clusters_Mass_NFDS==1)] <- col_clb[3]
colours_global_gene_UKMass_95[intersect(which(global_gene_clusters_UK_NFDS==1),which(global_gene_clusters_Mass_NFDS==1))] <- col_clb[8]
par(pty="s")
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = colours_global_gene_UKMass_95)
length(which(colours_global_gene_UKMass_95 == col_clb[2]))
# 161
length(which(colours_global_gene_UKMass_95 == col_clb[3]))
# 218
length(which(colours_global_gene_UKMass_95 == col_clb[8]))
# try this for new approach
#AllMatches_MassInUK_covmode1_Best1on1
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_covmode1_Best1on1)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
ndim(global_gene_clusters_UK)
length(global_gene_clusters_UK)
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 760
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
# colour them in by NFDS
global_gene_clusters_Mass_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_NFDS[i] <- min(1, sum(Mass_underNFDS[global_gene_clusters_Mass[[i]]]))
global_gene_clusters_UK_NFDS[i] <- min(1, sum(UK_underNFDS[global_gene_clusters_UK[[i]]]))
}
colours_global_gene_UKMass_95 <- rep("grey", length(global_gene_clusters_Mass_freqs))
colours_global_gene_UKMass_95[which(global_gene_clusters_UK_NFDS==1)] <- col_clb[2]
colours_global_gene_UKMass_95[which(global_gene_clusters_Mass_NFDS==1)] <- col_clb[3]
colours_global_gene_UKMass_95[intersect(which(global_gene_clusters_UK_NFDS==1),which(global_gene_clusters_Mass_NFDS==1))] <- col_clb[8]
par(pty="s")
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = colours_global_gene_UKMass_95)
length(which(colours_global_gene_UKMass_95 == col_clb[2]))
# 161
length(which(colours_global_gene_UKMass_95 == col_clb[3]))
# 218
length(which(colours_global_gene_UKMass_95 == col_clb[8]))
1771 * 0.28
length(UK_ggC_intermed_gene_names)
1614 * 0.21
# filter them:
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK)
AllMatches_UKinMass_filtered <- filter_matches(AllMatches_UKinMass)
create_global_clusters <- function(AllMatches_data){
AllGenesMass <- c(unique(AllMatches_data$query))
removed_items <- c()
i_help <- 1
global_gene_clusters_both <- list()
global_gene_clusters_a <- list()
global_gene_clusters_b <- list()
for (i in 1:length(AllGenesMass)) {
curr_gene <- AllGenesMass[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_data$target[which(AllMatches_data$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_data$query[which(AllMatches_data$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters_both[[i_help]] <- local_genes
global_gene_clusters_a[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_b[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
return(list(global_gene_clusters_both, global_gene_clusters_a, global_gene_clusters_b))
}
# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
intersect(which(global_gene_clusters_Mass_freqs>0.95), which(global_gene_clusters_UK_freqs < 0.05)
)
global_gene_clusters_Mass[149]
View(AllMatches_MassInUK_filtered)
View(AllMatches_MassInUK_filtered)
intersect(which(global_gene_clusters_Mass_freqs>0.99), which(global_gene_clusters_UK_freqs < 0.05)
)
intersect(which(global_gene_clusters_ggC_freqs > 0.99), which(global_gene_clusters_COG_freqs < 0.05))
global_gene_clusters_ggC[27]
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
