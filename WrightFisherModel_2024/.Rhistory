# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 760
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
# colour them in by NFDS
global_gene_clusters_Mass_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_NFDS[i] <- min(1, sum(Mass_underNFDS[global_gene_clusters_Mass[[i]]]))
global_gene_clusters_UK_NFDS[i] <- min(1, sum(UK_underNFDS[global_gene_clusters_UK[[i]]]))
}
colours_global_gene_UKMass_95 <- rep("grey", length(global_gene_clusters_Mass_freqs))
colours_global_gene_UKMass_95[which(global_gene_clusters_UK_NFDS==1)] <- col_clb[2]
colours_global_gene_UKMass_95[which(global_gene_clusters_Mass_NFDS==1)] <- col_clb[3]
colours_global_gene_UKMass_95[intersect(which(global_gene_clusters_UK_NFDS==1),which(global_gene_clusters_Mass_NFDS==1))] <- col_clb[8]
par(pty="s")
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = colours_global_gene_UKMass_95)
length(which(colours_global_gene_UKMass_95 == col_clb[2]))
# 161
length(which(colours_global_gene_UKMass_95 == col_clb[3]))
# 218
length(which(colours_global_gene_UKMass_95 == col_clb[8]))
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK, fident_filter = 0.95, len_filter = 0.4)
AllMatches_UKinMass_filtered <- filter_matches(AllMatches_UKinMass, fident_filter = 0.95, len_filter = 0.4)
create_global_clusters <- function(AllMatches_data){
AllGenesMass <- c(unique(AllMatches_data$query))
removed_items <- c()
i_help <- 1
global_gene_clusters_both <- list()
global_gene_clusters_a <- list()
global_gene_clusters_b <- list()
for (i in 1:length(AllGenesMass)) {
curr_gene <- AllGenesMass[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_data$target[which(AllMatches_data$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_data$query[which(AllMatches_data$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters_both[[i_help]] <- local_genes
global_gene_clusters_a[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_b[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
return(list(global_gene_clusters_both, global_gene_clusters_a, global_gene_clusters_b))
}
# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 760
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
# colour them in by NFDS
global_gene_clusters_Mass_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_NFDS[i] <- min(1, sum(Mass_underNFDS[global_gene_clusters_Mass[[i]]]))
global_gene_clusters_UK_NFDS[i] <- min(1, sum(UK_underNFDS[global_gene_clusters_UK[[i]]]))
}
colours_global_gene_UKMass_95 <- rep("grey", length(global_gene_clusters_Mass_freqs))
colours_global_gene_UKMass_95[which(global_gene_clusters_UK_NFDS==1)] <- col_clb[2]
colours_global_gene_UKMass_95[which(global_gene_clusters_Mass_NFDS==1)] <- col_clb[3]
colours_global_gene_UKMass_95[intersect(which(global_gene_clusters_UK_NFDS==1),which(global_gene_clusters_Mass_NFDS==1))] <- col_clb[8]
par(pty="s")
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = colours_global_gene_UKMass_95)
length(which(colours_global_gene_UKMass_95 == col_clb[2]))
# 161
length(which(colours_global_gene_UKMass_95 == col_clb[3]))
# 218
length(which(colours_global_gene_UKMass_95 == col_clb[8]))
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK, fident_filter = 0.95, len_filter = 0.2)
AllMatches_UKinMass_filtered <- filter_matches(AllMatches_UKinMass, fident_filter = 0.95, len_filter = 0.2)
create_global_clusters <- function(AllMatches_data){
AllGenesMass <- c(unique(AllMatches_data$query))
removed_items <- c()
i_help <- 1
global_gene_clusters_both <- list()
global_gene_clusters_a <- list()
global_gene_clusters_b <- list()
for (i in 1:length(AllGenesMass)) {
curr_gene <- AllGenesMass[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_data$target[which(AllMatches_data$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_data$query[which(AllMatches_data$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters_both[[i_help]] <- local_genes
global_gene_clusters_a[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_b[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
return(list(global_gene_clusters_both, global_gene_clusters_a, global_gene_clusters_b))
}
# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 760
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
# colour them in by NFDS
global_gene_clusters_Mass_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_NFDS[i] <- min(1, sum(Mass_underNFDS[global_gene_clusters_Mass[[i]]]))
global_gene_clusters_UK_NFDS[i] <- min(1, sum(UK_underNFDS[global_gene_clusters_UK[[i]]]))
}
colours_global_gene_UKMass_95 <- rep("grey", length(global_gene_clusters_Mass_freqs))
colours_global_gene_UKMass_95[which(global_gene_clusters_UK_NFDS==1)] <- col_clb[2]
colours_global_gene_UKMass_95[which(global_gene_clusters_Mass_NFDS==1)] <- col_clb[3]
colours_global_gene_UKMass_95[intersect(which(global_gene_clusters_UK_NFDS==1),which(global_gene_clusters_Mass_NFDS==1))] <- col_clb[8]
par(pty="s")
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = colours_global_gene_UKMass_95)
length(which(colours_global_gene_UKMass_95 == col_clb[2]))
# 161
length(which(colours_global_gene_UKMass_95 == col_clb[3]))
# 218
length(which(colours_global_gene_UKMass_95 == col_clb[8]))
# try this for new approach
#AllMatches_MassInUK_covmode1_Best1on1
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_covmode1_Best1on1)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
ndim(global_gene_clusters_UK)
length(global_gene_clusters_UK)
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = "#00000030")
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)>0.05))
# 760
length(which(abs(global_gene_clusters_Mass_freqs - global_gene_clusters_UK_freqs)<=0.05))
# colour them in by NFDS
global_gene_clusters_Mass_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_NFDS <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_NFDS[i] <- min(1, sum(Mass_underNFDS[global_gene_clusters_Mass[[i]]]))
global_gene_clusters_UK_NFDS[i] <- min(1, sum(UK_underNFDS[global_gene_clusters_UK[[i]]]))
}
colours_global_gene_UKMass_95 <- rep("grey", length(global_gene_clusters_Mass_freqs))
colours_global_gene_UKMass_95[which(global_gene_clusters_UK_NFDS==1)] <- col_clb[2]
colours_global_gene_UKMass_95[which(global_gene_clusters_Mass_NFDS==1)] <- col_clb[3]
colours_global_gene_UKMass_95[intersect(which(global_gene_clusters_UK_NFDS==1),which(global_gene_clusters_Mass_NFDS==1))] <- col_clb[8]
par(pty="s")
plot(global_gene_clusters_Mass_freqs, global_gene_clusters_UK_freqs, pch = 19, col = colours_global_gene_UKMass_95)
length(which(colours_global_gene_UKMass_95 == col_clb[2]))
# 161
length(which(colours_global_gene_UKMass_95 == col_clb[3]))
# 218
length(which(colours_global_gene_UKMass_95 == col_clb[8]))
1771 * 0.28
length(UK_ggC_intermed_gene_names)
1614 * 0.21
# filter them:
AllMatches_MassInUK_filtered <- filter_matches(AllMatches_MassInUK)
AllMatches_UKinMass_filtered <- filter_matches(AllMatches_UKinMass)
create_global_clusters <- function(AllMatches_data){
AllGenesMass <- c(unique(AllMatches_data$query))
removed_items <- c()
i_help <- 1
global_gene_clusters_both <- list()
global_gene_clusters_a <- list()
global_gene_clusters_b <- list()
for (i in 1:length(AllGenesMass)) {
curr_gene <- AllGenesMass[i]
if(!is.element(curr_gene, removed_items)){
local_genes <- c()
local_matches <- AllMatches_data$target[which(AllMatches_data$query == curr_gene)]
#local_re_matches <- AllMatches_MassggCinCOG_hq_seqlen_alnlen$query[which(AllMatches_MassggCinCOG_hq_seqlen_alnlen$target == local_matches)]
local_re_matches <- c()
for (j in 1:length(local_matches)) {
match_gene <-local_matches[j]
#  local_genes <- c(local_genes, match_gene)
local_re_matches <- c(local_re_matches,AllMatches_data$query[which(AllMatches_data$target == match_gene)])
}
local_genes <- c(curr_gene, local_matches, local_re_matches)
local_genes <- unique(local_genes)
global_gene_clusters_both[[i_help]] <- local_genes
global_gene_clusters_a[[i_help]] <- unique(c(curr_gene, local_re_matches))
global_gene_clusters_b[[i_help]] <- unique(c(local_matches))
removed_items <- append(removed_items, c(curr_gene, local_re_matches))
i_help <- i_help +1
}
}
return(list(global_gene_clusters_both, global_gene_clusters_a, global_gene_clusters_b))
}
# create cluster for Mass-UK
global_clusters_return_Mass_UK <- create_global_clusters(AllMatches_MassInUK_filtered)
global_gene_clusters_Mass_UK <- global_clusters_return_Mass_UK[[1]]
global_gene_clusters_Mass <- global_clusters_return_Mass_UK[[2]]
global_gene_clusters_UK <- global_clusters_return_Mass_UK[[3]]
#compute gene freqs
global_gene_clusters_Mass_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
global_gene_clusters_UK_freqs <- rep(0, length(global_gene_clusters_Mass_UK))
for (i in 1:length(global_gene_clusters_Mass_UK)) {
global_gene_clusters_Mass_freqs[i] <- min(1, sum(Mass_ggC_all_gene_freqs_dict[global_gene_clusters_Mass[[i]]])) # there were a couple >1 which should be split up paralogs?
global_gene_clusters_UK_freqs[i] <- min(1,sum(UK_ggC_all_gene_freqs_dict[global_gene_clusters_UK[[i]]]))
}
intersect(which(global_gene_clusters_Mass_freqs>0.95), which(global_gene_clusters_UK_freqs < 0.05)
)
global_gene_clusters_Mass[149]
View(AllMatches_MassInUK_filtered)
View(AllMatches_MassInUK_filtered)
intersect(which(global_gene_clusters_Mass_freqs>0.99), which(global_gene_clusters_UK_freqs < 0.05)
)
intersect(which(global_gene_clusters_ggC_freqs > 0.99), which(global_gene_clusters_COG_freqs < 0.05))
global_gene_clusters_ggC[27]
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
### investigate hits that are very frequent in ggCaller and very rare in COGs
intersect(which(global_gene_clusters_ggC_freqs > 0.99), which(global_gene_clusters_COG_freqs < 0.05))
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
View(AllMatches_MassggCinCOG_hq_seqlen_alnlen)
global_gene_clusters_ggC[27]
global_gene_clusters_ggC_freqs[27]
global_gene_clusters_COG_freqs[27]
global_gene_clusters_ggC[[27]]
Mass_ggC_all_gene_freqs_dict["ERS044043_02758~~~ERS044119_02218"]
head(Mass_ggC_all_gene_freqs_dict)
which(ggC_all_gene_names == "ERS044043_02758~~~ERS044119_02218")
ggC_all_gene_freqs[907]
ggC_all_gene_freqs["907"]
ggC_gene_freq_2001[907]
View(ggCaller_gene_presence_absence_2001)
sum(ggCaller_gene_presence_absence_2001[908,-1])
head(ggCaller_gene_presence_absence_2001[908,-1])
head(as.integer(ggCaller_gene_presence_absence_2001[908,-1]))
sum(as.integer(ggCaller_gene_presence_absence_2001[908,-1]))
sum(as.integer(ggCaller_gene_presence_absence_2001[908,-1]))/length(as.integer(ggCaller_gene_presence_absence_2001[908,-1])
)
length(as.integer(ggCaller_gene_presence_absence_2001[908,-1])
)
ncol(ggCaller_gene_presence_absence_2001)
length(gene_presence_absence_2001[1,-1])
which(cog_all_gene_names == "CLS01535")
sum(as.integer(gene_presence_absence_2001[762, -1]))
sum(as.integer(gene_presence_absence_2001[762, -1]))/ncol(gene_presence_absence_2001)
which(cog_all_gene_names == "CLS99848")
5250 /60
5250/2
5250 * 2 /60
1493767 / 60
24897 / 60
# reading in the gene presence absence matrix produced by ggCaller
#ggCaller_gene_presence_absence <- read.csv(paste(path_to_data, "Massachusetts_ggcaller/run2/ggCaller_output/gene_presence_absence.csv", sep = ""), header=FALSE)
ggCaller_gene_presence_absence <- read.csv(paste(path_to_data, "Massachusetts_ggcaller/run_withFuncAnn/ggCaller_output/gene_presence_absence.csv", sep = ""), header=FALSE)
View(ggCaller_gene_presence_absence)
ggCaller_gene_presence_absence
View(ggCaller_gene_presence_absence)
1980*3
354/2862
0.12 * 8
370/2862
13 * 8
12.9 * 8
1668/2862
# 4-parameter model GPSC
# and winter
Nepal_4param_mcmc2 <- readRDS("/Users/llorenz/Documents/PhD_Project/Code/1st_project/WF_plots_postTAC/2025_01_21/Nepal_winter/Nepal_PPxSero_ggCaller_PopPUNK_4param_det_pmcmc_run2.rds")
head(Nepal_4param_mcmc2$probabilities)
head(Nepal_4param_mcmc2)
# check the proposal matrix
proposal_matrix <- cov(Nepal_4param_mcmc2$pars)
proposal_matrix
8.630871e-02
# check the covariance matrix
cov_matrix <- cov(Nepal_4param_mcmc2$pars)
# check the covariance matrix
cov_matrix <- cov(Nepal_4param_mcmc2$pars)
saveRDS(cov_matrix, "Nepal_cov_matrix.rds")
rm(Nepal_4param_mcmc2)
### Loading packages
# install.packages("drat") # -- if you don't have drat installed
# drat:::add("ncov-ic")
# install.packages("odin.dust")
library(odin.dust)
#install.packages("mcstate")
library(mcstate)
#install.packages("mcstate")
library(mcstate)
library(coda)
# read in model from file
WF <- odin.dust::odin_dust("NFDS_Model_PPxSero.R")
# likelihood for fitting:
ll_pois <<- function(obs, model) {
exp_noise <- 1e6
if (is.na(obs)) {
# Creates vector of zeros in ll with same length, if no data
ll_obs <- numeric(length(model))
} else {
lambda <- model + rexp(n = length(model), rate = exp_noise)
ll_obs <- dpois(x = obs, lambda = lambda, log = TRUE)
}
ll_obs
}
combined_compare <- function(state, observed, pars = NULL) {
result <- 0
#data_size <- sum(unlist(observed))
data_size <- sum(unlist(observed[as.character(1:(length(unlist(observed))-4))]))
model_size = sum(unlist(state[-1, , drop = TRUE]))
exp_noise <- 1e6
data_vals <- unlist(observed[as.character(1:(length(unlist(observed))-4))])
#model_vals <- state[-1, , drop = TRUE]
model_vals <- rep(0, length(unlist(observed))-4)
data_missing <- FALSE
for (i in 1:(length(unlist(observed))-4)){
state_name <- paste("sum_clust", i, sep = "")
model_vals[i] <- state[state_name, , drop = TRUE]
if (is.na(observed[[as.character(i)]])) {
#Creates vector of zeros in ll with same length, if no data
#ll_obs <- numeric(length( state[state_name, , drop = TRUE]))
data_missing <- TRUE
}
}
models_vals_err <- model_vals + rexp(n = length(model_vals), rate = exp_noise)
if(data_missing){
ll_obs <- 0
}
else{
ll_obs <- dmultinom(x = (data_vals), prob = models_vals_err/model_size, log = TRUE)
}
result <- ll_obs
#for (i in 1:(length(unlist(observed))-4)){
#  state_name <- paste("sum_clust", i, sep = "")
#  if (is.na(observed[[as.character(i)]])) {
#    #Creates vector of zeros in ll with same length, if no data
#    ll_obs <- numeric(length( state[state_name, , drop = TRUE]))
#  } else {
#lambda <-  state[state_name, , drop = TRUE]/model_size * data_size + rexp(n = length( state[state_name, , drop = TRUE]/model_size * data_size), rate = exp_noise)
#ll_obs <- dpois(x = observed[[as.character(i)]], lambda = lambda, log = TRUE)
#    ll_obs <- dmultinom(x = (data_vals), prob = model_vals/model_size, log = TRUE)
#  }
#  result <- result + ll_obs
#}
result
}
seq_clusters <- readRDS("Nepal_PP.rds")
intermed_gene_presence_absence_consensus <- readRDS(file = "Nepal_ggCaller_intermed_consensus.rds")
intermed_gene_presence_absence_consensus_matrix <- sapply(intermed_gene_presence_absence_consensus[-1,-1],as.double)
delta_ranking <- readRDS(file = "Nepal_delta_ranking.rds")
#mass_cluster_freq_1 <- readRDS(file = "Nepal_cluster_freqs_1.rds")
#mass_cluster_freq_2 <- readRDS(file = "Nepal_cluster_freqs_2.rds")
#mass_cluster_freq_3 <- readRDS(file = "Nepal_cluster_freqs_3.rds")
#mass_cluster_freq_4 <- readRDS(file = "Nepal_cluster_freqs_4.rds")
#mass_cluster_freq_5 <- readRDS(file = "Nepal_cluster_freqs_5.rds")
mass_cluster_freq_6 <- readRDS(file = "Nepal_cluster_freqs_6.rds")
mass_cluster_freq_7 <- readRDS(file = "Nepal_cluster_freqs_7.rds")
mass_cluster_freq_8 <- readRDS(file = "Nepal_cluster_freqs_8.rds")
mass_cluster_freq_9 <- readRDS(file = "Nepal_cluster_freqs_9.rds")
mass_cluster_freq_10 <- readRDS(file = "Nepal_cluster_freqs_10.rds")
mass_cluster_freq_11 <- readRDS(file = "Nepal_cluster_freqs_11.rds")
mass_cluster_freq_12 <- readRDS(file = "Nepal_cluster_freqs_12.rds")
mass_cluster_freq_13 <- readRDS(file = "Nepal_cluster_freqs_13.rds")
mass_cluster_freq_14 <- readRDS(file = "Nepal_cluster_freqs_14.rds")
mass_cluster_freq_15 <- readRDS(file = "Nepal_cluster_freqs_15.rds")
mass_cluster_freq_16 <- readRDS(file = "Nepal_cluster_freqs_16.rds")
mass_cluster_freq_17 <- readRDS(file = "Nepal_cluster_freqs_17.rds")
mass_clusters <- length(unique(seq_clusters$Cluster))
sero_no = length(unique(seq_clusters$Serotype))
model_start_pop <- readRDS(file = "Nepal_PPsero_startpop.rds")
mass_VT <- readRDS(file = "Nepal_SeroVT.rds")
mass_clusters <- length(unique(seq_clusters$GPSC))
avg_cluster_freq <- readRDS(file = "Nepal_PPsero_mig.rds")
dt <- 1/12
peripost_mass_cluster_freq <- data.frame("year" = 1:10, rbind(mass_cluster_freq_8,mass_cluster_freq_9, mass_cluster_freq_10, mass_cluster_freq_11,mass_cluster_freq_12, mass_cluster_freq_13, mass_cluster_freq_14,mass_cluster_freq_15,mass_cluster_freq_16,mass_cluster_freq_17))
names(peripost_mass_cluster_freq) <- c("year", as.character(1:mass_clusters))
vacc_time <- 6
cov_matrix <- readRDS("Nepal_cov_matrix.rds")
output_filename <- "Nepal_PPxSero_ggCaller_PopPUNK"
fitting_mass_data <- mcstate::particle_filter_data(data = peripost_mass_cluster_freq,
time = "year",
rate = 1 / dt,
initial_time = 0)
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
compare = combined_compare)
# Using MCMC to infer parameters
pmcmc_sigma_f <- mcstate::pmcmc_parameter("sigma_f", 0.15, min = 0, max = 1)
#pmcmc_sigma_w <- 0
pmcmc_sigma_w <- -1000
pmcmc_prop_f <- mcstate::pmcmc_parameter("prop_f", 0.2, min = 0, max = 1)
pmcmc_m <- mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 1)
pmcmc_v <- mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)
species_no <- mass_clusters
no_clusters <- mass_clusters
gene_no <- nrow(intermed_gene_presence_absence_consensus_matrix)
Pop_ini <- data.frame(model_start_pop)
Pop_eq <- rowSums(model_start_pop)
Genotypes <- intermed_gene_presence_absence_consensus_matrix
capacity <- sum(model_start_pop)
delta <- delta_ranking
vaccTypes <- mass_VT
migVec <- data.frame(avg_cluster_freq)
complex_params = list(species_no = species_no, Pop_ini = Pop_ini, Pop_eq = Pop_eq, Genotypes = intermed_gene_presence_absence_consensus[-1,-1], capacity = capacity, delta = delta, vaccTypes = vaccTypes, gene_no = gene_no, vacc_time = vacc_time, dt = dt, sigma_w = pmcmc_sigma_w, migVec = (migVec), sero_no = sero_no)
make_transform <- function(m) {
function(theta) {
as_double_mtx <- function(x){
sapply(x,as.double)
}
c(lapply(m, as_double_mtx), as.list(theta))
}
}
proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
index <- function(info) {
list(run = c(sum_clust = info$index$Pop_tot),
state = c(Pop = info$index$Pop))
}
#proposal_matrix <- diag(0.1,4) # the proposal matrix defines the covariance-variance matrix for a mult normal dist
# here, all parameters are proposed independently.
# think about this, this might not actually be true
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(pmcmc_sigma_f, pmcmc_sigma_w, pmcmc_prop_f, pmcmc_m, pmcmc_v), proposal_matrix, transform)
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", 0.1432, min = 0, max = 1), mcstate::pmcmc_parameter("prop_f", 0.25, min = 0, max = 1), mcstate::pmcmc_parameter("m", 0.03, min = 0, max = 01), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
#mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = -2), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -0.597837, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 0.125, min = 0, max = 1), mcstate::pmcmc_parameter("m", -4, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 0.05, min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
proposal_matrix <- diag(c(exp(1), 0.1, exp(1), 0.1))
proposal_matrix <- cov_matrix
param_mean <- apply(Nepal_4param_mcmc2_probs, 2, mean)
print(param_mean)
mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", -2.381981e+00, min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", 3.565618e-01, min = 0, max = 1), mcstate::pmcmc_parameter("m", -2.525765e+00, min = -1000, max = 0), mcstate::pmcmc_parameter("v", 2.693263e-02 , min = 0, max = 1)), proposal_matrix, make_transform(complex_params))
mcmc_pars$initial()
#WF$public_methods$has_openmp()
det_filter <- particle_deterministic$new(data = fitting_mass_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains =4, n_workers = 4,
n_threads_total = 4)
det_pmcmc_run <- mcstate::pmcmc(mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 0, thin = 1)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run, burnin = 1, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
plot(det_mcmc1)
proposal_matrix <- matrix(c(0.106109695, -1.182372e-03, 8.630871e-02, 2.678091e-03, -0.001182372, 4.538948e-04, 4.040424e-06, 1.149815e-06, 0.086308706, 4.040424e-06, 7.615308e-02, 2.245703e-03, 0.002678091, 1.149815e-06, 2.245703e-03, 3.197342e-04), nrow=4, ncol =4, byRow = TRUE)
proposal_matrix <- matrix(c(0.106109695, -1.182372e-03, 8.630871e-02, 2.678091e-03, -0.001182372, 4.538948e-04, 4.040424e-06, 1.149815e-06, 0.086308706, 4.040424e-06, 7.615308e-02, 2.245703e-03, 0.002678091, 1.149815e-06, 2.245703e-03, 3.197342e-04), nrow=4, ncol =4, byrow = TRUE)
proposal_matrix
cov_matrix
100 * 16
2114/2862
5/8
proposal_matrix <- matrix(c(0.106109695, -0.001182372, 0.086308706, 0.002678091, -0.001182372, 4.538948e-04, 4.040424e-06, 1.149815e-06, 0.086308706, 4.040424e-06, 7.615308e-02, 2.245703e-03, 0.002678091, 1.149815e-06, 2.245703e-03, 3.197342e-04), nrow=4, ncol =4, byrow = TRUE)
proposal_matrix
