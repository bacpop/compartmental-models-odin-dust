while(i <= length(local_clusters)){
curr_clust <- names(local_clusters)[i]
if(local_clusters[i] == "a"){
#curr_genes <- c(setdiff(c(local_clust_a_list[[curr_clust]]), local_genes[[curr_clust]])) # genes that are in the cluster but have not been looked at yet
#print(curr_genes)
if(length(which(match_df$query_clust == curr_clust)) != 0){
new_clusters <- match_df$target_clust[which(match_df$query_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "b"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
else{ # is from dataset b
if(length(which(match_df$target_clust == curr_clust)) != 0){
new_clusters <- match_df$query_clust[which(match_df$target_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "a"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
i <- i + 1
}
Clust_a_used[names(local_clusters[which(local_clusters == "a")])] <- TRUE # makes sure to not iterate over clusters later that have already been assigned to global clusters
#print(local_clusters)
consensus_gene_clusters_both[[i_help]] <- names(local_clusters) # saves all clusters (from a and b) to consensus cluster
consensus_gene_clusters_a[[i_help]] <- names(local_clusters[which(local_clusters == "a")])
consensus_gene_clusters_b[[i_help]] <- names(local_clusters[which(local_clusters == "b")])
i_help <- i_help + 1
}
}
return(list(consensus_gene_clusters_both, consensus_gene_clusters_a, consensus_gene_clusters_b))
}
consensus_clusters_Mass_ggC_gCOG_return <- CreateConsensusClusters_bycluster(match_df = AllHits_Mass_ggC_gCOG_filterfident_unique)
consensus_clusters_Mass_ggC_gCOG_both <- consensus_clusters_Mass_ggC_gCOG_return[[1]]
consensus_clusters_Mass_ggC <- consensus_clusters_Mass_ggC_gCOG_return[[2]]
consensus_clusters_Mass_gCOG <- consensus_clusters_Mass_ggC_gCOG_return[[3]]
consensus_clusters_Mass_ggC_gCOG_both_match <- consensus_clusters_Mass_ggC_gCOG_both[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_ggC_match <- consensus_clusters_Mass_ggC[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_gCOG_match <- consensus_clusters_Mass_gCOG[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
#compute gene freqs
consensus_gene_clusters_ggC_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
consensus_gene_clusters_COG_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
for (i in 1:length(consensus_clusters_Mass_ggC_gCOG_both_match)) {
consensus_gene_clusters_ggC_freqs[i] <- min(1,sum(Mass_ggC_all_gene_freqs_dict[sapply(consensus_clusters_Mass_ggC_match[[i]], replace_minus)]))
consensus_gene_clusters_COG_freqs[i] <- min(1,sum(Mass_cog_all_gene_freqs_dict[consensus_clusters_Mass_gCOG_match[[i]]]))
}
#plot them!
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity", ylim = c(0,1), xlim = c(0,1))
abline(0,1)
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030")
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030",ylim = c(0,1), xlim = c(0,1))
length(which(abs(consensus_gene_clusters_ggC_freqs - consensus_gene_clusters_COG_freqs)>0.05))
# 105
length(which(abs(consensus_gene_clusters_ggC_freqs - consensus_gene_clusters_COG_freqs)<=0.05))
# 1378
length(which(lengths(consensus_clusters_Mass_ggC_gCOG_both)==1))
# 1378
length(which(lengths(consensus_clusters_Mass_ggC_gCOG_both)==1))
head(lengths(consensus_clusters_Mass_ggC_gCOG_both))
length(which(lengths(consensus_clusters_Mass_ggC_gCOG_both)==1))
length(unique(consensus_clusters_Mass_ggC_match))
head(unique(consensus_clusters_Mass_ggC_match))
head(unique(unlist(consensus_clusters_Mass_ggC_match)))
length(unique(unlist(consensus_clusters_Mass_ggC_match)))
length(Mass_ggC_all_gene_freqs_dict)
intersect(which(consensus_gene_clusters_ggC_freqs > 0.95), which(consensus_gene_clusters_COG_freqs < 0.05))
consensus_clusters_Mass_ggC_match[[198]]
consensus_clusters_Mass_ggC_match[[399]]
consensus_clusters_Mass_ggC_match[[437]]
144/234
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG$fident >= 0.95),]
AllHits_Mass_ggC_gCOG_filterfident_len1 <- AllHits_Mass_ggC_gCOG_filterfident[which(AllHits_Mass_ggC_gCOG_filterfident$qlen/AllHits_Mass_ggC_gCOG_filterfident$tlen  >= 0.8),]
AllHits_Mass_ggC_gCOG_filterfident_len <- AllHits_Mass_ggC_gCOG_filterfident_len1[which(AllHits_Mass_ggC_gCOG_filterfident_len1$tlen/AllHits_Mass_ggC_gCOG_filterfident_len1$qlen  >= 0.8),]
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG_filterfident_len
AllHits_Mass_ggC_gCOG_filterfident$query_clust <- SeqsClust_Mass_ggC_dict[AllHits_Mass_ggC_gCOG_filterfident$query]
AllHits_Mass_ggC_gCOG_filterfident$target_clust <- SeqsClust_Mass_gCOG_dict[AllHits_Mass_ggC_gCOG_filterfident$target]
AllHits_Mass_ggC_gCOG_filterfident$combined_clust <- paste(AllHits_Mass_ggC_gCOG_filterfident$query_clust, AllHits_Mass_ggC_gCOG_filterfident$target_clust)
length(AllHits_Mass_ggC_gCOG_filterfident$combined_clust)
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG$fident >= 0.95),]
AllHits_Mass_ggC_gCOG_filterfident_len1 <- AllHits_Mass_ggC_gCOG_filterfident[which(AllHits_Mass_ggC_gCOG_filterfident$qlen/AllHits_Mass_ggC_gCOG_filterfident$tlen  >= 0.8),]
AllHits_Mass_ggC_gCOG_filterfident_len <- AllHits_Mass_ggC_gCOG_filterfident_len1[which(AllHits_Mass_ggC_gCOG_filterfident_len1$tlen/AllHits_Mass_ggC_gCOG_filterfident_len1$qlen  >= 0.8),]
nrow(AllHits_Mass_ggC_gCOG_filterfident_len)
AllHits_Mass_ggC_gCOG_filterfident_len1 <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG_filterfident$alnlen/AllHits_Mass_ggC_gCOG_filterfident$tlen  >= 0.8),]
AllHits_Mass_ggC_gCOG_filterfident_len <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG_filterfident_len1$alnlen/AllHits_Mass_ggC_gCOG_filterfident_len1$qlen  >= 0.8),]
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG_filterfident_len
AllHits_Mass_ggC_gCOG_filterfident$query_clust <- SeqsClust_Mass_ggC_dict[AllHits_Mass_ggC_gCOG_filterfident$query]
AllHits_Mass_ggC_gCOG_filterfident$target_clust <- SeqsClust_Mass_gCOG_dict[AllHits_Mass_ggC_gCOG_filterfident$target]
AllHits_Mass_ggC_gCOG_filterfident$combined_clust <- paste(AllHits_Mass_ggC_gCOG_filterfident$query_clust, AllHits_Mass_ggC_gCOG_filterfident$target_clust)
length(AllHits_Mass_ggC_gCOG_filterfident$combined_clust)
#[1] 611133
# filtered by length 50% 20050
length(unique(AllHits_Mass_ggC_gCOG_filterfident$combined_clust))
#[1] 5843
# filtered by length 50% 1743
AllHits_Mass_ggC_gCOG_filterfident_unique <- AllHits_Mass_ggC_gCOG_filterfident[!duplicated(AllHits_Mass_ggC_gCOG_filterfident$combined_clust), ]
CreateConsensusClusters_bycluster <- function(match_df){
# create empty list of consensus gene clusters
consensus_gene_clusters_both <- list()
consensus_gene_clusters_a <- list()
consensus_gene_clusters_b <- list()
# save which clusters have already been clustered
Clust_a_used <- rep(FALSE, nrow(match_df))
names(Clust_a_used) <- match_df$query_clust
#Clust_b_used <- rep(FALSE, length(local_clust_b_list))
#names(Clust_b_used) <- names(local_clust_b_list)
#
#local_genes <- list()
#local_clusters <- c()
i_help <- 1 # keeps track of number of consensus clusters
for (cluster_id in match_df$query_clust) {
if(!Clust_a_used[cluster_id]){
local_clusters <- "a" # saves info that this cluster is from dataset a
names(local_clusters) <- cluster_id # saves cluster name
#local_genes <- list(cluster_id = "") # creates empty entry for all genes in the cluster
i <- 1
while(i <= length(local_clusters)){
curr_clust <- names(local_clusters)[i]
if(local_clusters[i] == "a"){
#curr_genes <- c(setdiff(c(local_clust_a_list[[curr_clust]]), local_genes[[curr_clust]])) # genes that are in the cluster but have not been looked at yet
#print(curr_genes)
if(length(which(match_df$query_clust == curr_clust)) != 0){
new_clusters <- match_df$target_clust[which(match_df$query_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "b"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
else{ # is from dataset b
if(length(which(match_df$target_clust == curr_clust)) != 0){
new_clusters <- match_df$query_clust[which(match_df$target_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "a"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
i <- i + 1
}
Clust_a_used[names(local_clusters[which(local_clusters == "a")])] <- TRUE # makes sure to not iterate over clusters later that have already been assigned to global clusters
#print(local_clusters)
consensus_gene_clusters_both[[i_help]] <- names(local_clusters) # saves all clusters (from a and b) to consensus cluster
consensus_gene_clusters_a[[i_help]] <- names(local_clusters[which(local_clusters == "a")])
consensus_gene_clusters_b[[i_help]] <- names(local_clusters[which(local_clusters == "b")])
i_help <- i_help + 1
}
}
return(list(consensus_gene_clusters_both, consensus_gene_clusters_a, consensus_gene_clusters_b))
}
consensus_clusters_Mass_ggC_gCOG_return <- CreateConsensusClusters_bycluster(match_df = AllHits_Mass_ggC_gCOG_filterfident_unique)
consensus_clusters_Mass_ggC_gCOG_both <- consensus_clusters_Mass_ggC_gCOG_return[[1]]
consensus_clusters_Mass_ggC <- consensus_clusters_Mass_ggC_gCOG_return[[2]]
consensus_clusters_Mass_gCOG <- consensus_clusters_Mass_ggC_gCOG_return[[3]]
consensus_clusters_Mass_ggC_gCOG_both_match <- consensus_clusters_Mass_ggC_gCOG_both[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_ggC_match <- consensus_clusters_Mass_ggC[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_gCOG_match <- consensus_clusters_Mass_gCOG[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
#compute gene freqs
consensus_gene_clusters_ggC_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
consensus_gene_clusters_COG_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
for (i in 1:length(consensus_clusters_Mass_ggC_gCOG_both_match)) {
consensus_gene_clusters_ggC_freqs[i] <- min(1,sum(Mass_ggC_all_gene_freqs_dict[sapply(consensus_clusters_Mass_ggC_match[[i]], replace_minus)]))
consensus_gene_clusters_COG_freqs[i] <- min(1,sum(Mass_cog_all_gene_freqs_dict[consensus_clusters_Mass_gCOG_match[[i]]]))
}
#plot them!
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity", ylim = c(0,1), xlim = c(0,1))
abline(0,1)
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030")
length(which(abs(consensus_gene_clusters_ggC_freqs - consensus_gene_clusters_COG_freqs)>0.05))
# 105
length(which(abs(consensus_gene_clusters_ggC_freqs - consensus_gene_clusters_COG_freqs)<=0.05))
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG$fident >= 0.95),]
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG$fident >= 0.95),]
AllHits_Mass_ggC_gCOG_filterfident_len1 <- AllHits_Mass_ggC_gCOG_filterfident[which(AllHits_Mass_ggC_gCOG_filterfident$qlen/AllHits_Mass_ggC_gCOG_filterfident$tlen  >= 0.8),]
AllHits_Mass_ggC_gCOG_filterfident_len <- AllHits_Mass_ggC_gCOG_filterfident_len1[which(AllHits_Mass_ggC_gCOG_filterfident_len1$tlen/AllHits_Mass_ggC_gCOG_filterfident_len1$qlen  >= 0.8),]
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG_filterfident_len
AllHits_Mass_ggC_gCOG_filterfident$query_clust <- SeqsClust_Mass_ggC_dict[AllHits_Mass_ggC_gCOG_filterfident$query]
AllHits_Mass_ggC_gCOG_filterfident$target_clust <- SeqsClust_Mass_gCOG_dict[AllHits_Mass_ggC_gCOG_filterfident$target]
AllHits_Mass_ggC_gCOG_filterfident$combined_clust <- paste(AllHits_Mass_ggC_gCOG_filterfident$query_clust, AllHits_Mass_ggC_gCOG_filterfident$target_clust)
length(AllHits_Mass_ggC_gCOG_filterfident$combined_clust)
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG$fident >= 0.95),]
AllHits_Mass_ggC_gCOG_filterfident_len1 <- AllHits_Mass_ggC_gCOG_filterfident[which(AllHits_Mass_ggC_gCOG_filterfident$qlen/AllHits_Mass_ggC_gCOG_filterfident$tlen  >= 0.7),]
AllHits_Mass_ggC_gCOG_filterfident_len <- AllHits_Mass_ggC_gCOG_filterfident_len1[which(AllHits_Mass_ggC_gCOG_filterfident_len1$tlen/AllHits_Mass_ggC_gCOG_filterfident_len1$qlen  >= 0.7),]
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG_filterfident_len
AllHits_Mass_ggC_gCOG_filterfident$query_clust <- SeqsClust_Mass_ggC_dict[AllHits_Mass_ggC_gCOG_filterfident$query]
AllHits_Mass_ggC_gCOG_filterfident$target_clust <- SeqsClust_Mass_gCOG_dict[AllHits_Mass_ggC_gCOG_filterfident$target]
AllHits_Mass_ggC_gCOG_filterfident$combined_clust <- paste(AllHits_Mass_ggC_gCOG_filterfident$query_clust, AllHits_Mass_ggC_gCOG_filterfident$target_clust)
length(AllHits_Mass_ggC_gCOG_filterfident$combined_clust)
#[1] 611133
# filtered by length 50% 20050
length(unique(AllHits_Mass_ggC_gCOG_filterfident$combined_clust))
#[1] 5843
# filtered by length 50% 1743
AllHits_Mass_ggC_gCOG_filterfident_unique <- AllHits_Mass_ggC_gCOG_filterfident[!duplicated(AllHits_Mass_ggC_gCOG_filterfident$combined_clust), ]
CreateConsensusClusters_bycluster <- function(match_df){
# create empty list of consensus gene clusters
consensus_gene_clusters_both <- list()
consensus_gene_clusters_a <- list()
consensus_gene_clusters_b <- list()
# save which clusters have already been clustered
Clust_a_used <- rep(FALSE, nrow(match_df))
names(Clust_a_used) <- match_df$query_clust
#Clust_b_used <- rep(FALSE, length(local_clust_b_list))
#names(Clust_b_used) <- names(local_clust_b_list)
#
#local_genes <- list()
#local_clusters <- c()
i_help <- 1 # keeps track of number of consensus clusters
for (cluster_id in match_df$query_clust) {
if(!Clust_a_used[cluster_id]){
local_clusters <- "a" # saves info that this cluster is from dataset a
names(local_clusters) <- cluster_id # saves cluster name
#local_genes <- list(cluster_id = "") # creates empty entry for all genes in the cluster
i <- 1
while(i <= length(local_clusters)){
curr_clust <- names(local_clusters)[i]
if(local_clusters[i] == "a"){
#curr_genes <- c(setdiff(c(local_clust_a_list[[curr_clust]]), local_genes[[curr_clust]])) # genes that are in the cluster but have not been looked at yet
#print(curr_genes)
if(length(which(match_df$query_clust == curr_clust)) != 0){
new_clusters <- match_df$target_clust[which(match_df$query_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "b"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
else{ # is from dataset b
if(length(which(match_df$target_clust == curr_clust)) != 0){
new_clusters <- match_df$query_clust[which(match_df$target_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "a"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
i <- i + 1
}
Clust_a_used[names(local_clusters[which(local_clusters == "a")])] <- TRUE # makes sure to not iterate over clusters later that have already been assigned to global clusters
#print(local_clusters)
consensus_gene_clusters_both[[i_help]] <- names(local_clusters) # saves all clusters (from a and b) to consensus cluster
consensus_gene_clusters_a[[i_help]] <- names(local_clusters[which(local_clusters == "a")])
consensus_gene_clusters_b[[i_help]] <- names(local_clusters[which(local_clusters == "b")])
i_help <- i_help + 1
}
}
return(list(consensus_gene_clusters_both, consensus_gene_clusters_a, consensus_gene_clusters_b))
}
consensus_clusters_Mass_ggC_gCOG_return <- CreateConsensusClusters_bycluster(match_df = AllHits_Mass_ggC_gCOG_filterfident_unique)
consensus_clusters_Mass_ggC_gCOG_both <- consensus_clusters_Mass_ggC_gCOG_return[[1]]
consensus_clusters_Mass_ggC <- consensus_clusters_Mass_ggC_gCOG_return[[2]]
consensus_clusters_Mass_gCOG <- consensus_clusters_Mass_ggC_gCOG_return[[3]]
consensus_clusters_Mass_ggC_gCOG_both_match <- consensus_clusters_Mass_ggC_gCOG_both[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_ggC_match <- consensus_clusters_Mass_ggC[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_gCOG_match <- consensus_clusters_Mass_gCOG[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
#compute gene freqs
consensus_gene_clusters_ggC_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
consensus_gene_clusters_COG_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
for (i in 1:length(consensus_clusters_Mass_ggC_gCOG_both_match)) {
consensus_gene_clusters_ggC_freqs[i] <- min(1,sum(Mass_ggC_all_gene_freqs_dict[sapply(consensus_clusters_Mass_ggC_match[[i]], replace_minus)]))
consensus_gene_clusters_COG_freqs[i] <- min(1,sum(Mass_cog_all_gene_freqs_dict[consensus_clusters_Mass_gCOG_match[[i]]]))
}
#plot them!
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity", ylim = c(0,1), xlim = c(0,1))
abline(0,1)
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030")
length(AllHits_Mass_ggC_gCOG_filterfident$combined_clust)
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG$fident >= 0.99),]
AllHits_Mass_ggC_gCOG_filterfident_len1 <- AllHits_Mass_ggC_gCOG_filterfident[which(AllHits_Mass_ggC_gCOG_filterfident$qlen/AllHits_Mass_ggC_gCOG_filterfident$tlen  >= 0.6),]
AllHits_Mass_ggC_gCOG_filterfident_len <- AllHits_Mass_ggC_gCOG_filterfident_len1[which(AllHits_Mass_ggC_gCOG_filterfident_len1$tlen/AllHits_Mass_ggC_gCOG_filterfident_len1$qlen  >= 0.6),]
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG_filterfident_len
AllHits_Mass_ggC_gCOG_filterfident$query_clust <- SeqsClust_Mass_ggC_dict[AllHits_Mass_ggC_gCOG_filterfident$query]
AllHits_Mass_ggC_gCOG_filterfident$target_clust <- SeqsClust_Mass_gCOG_dict[AllHits_Mass_ggC_gCOG_filterfident$target]
AllHits_Mass_ggC_gCOG_filterfident$combined_clust <- paste(AllHits_Mass_ggC_gCOG_filterfident$query_clust, AllHits_Mass_ggC_gCOG_filterfident$target_clust)
length(AllHits_Mass_ggC_gCOG_filterfident$combined_clust)
#[1] 611133
# filtered by length 50% 20050
length(unique(AllHits_Mass_ggC_gCOG_filterfident$combined_clust))
#[1] 5843
# filtered by length 50% 1743
AllHits_Mass_ggC_gCOG_filterfident_unique <- AllHits_Mass_ggC_gCOG_filterfident[!duplicated(AllHits_Mass_ggC_gCOG_filterfident$combined_clust), ]
CreateConsensusClusters_bycluster <- function(match_df){
# create empty list of consensus gene clusters
consensus_gene_clusters_both <- list()
consensus_gene_clusters_a <- list()
consensus_gene_clusters_b <- list()
# save which clusters have already been clustered
Clust_a_used <- rep(FALSE, nrow(match_df))
names(Clust_a_used) <- match_df$query_clust
#Clust_b_used <- rep(FALSE, length(local_clust_b_list))
#names(Clust_b_used) <- names(local_clust_b_list)
#
#local_genes <- list()
#local_clusters <- c()
i_help <- 1 # keeps track of number of consensus clusters
for (cluster_id in match_df$query_clust) {
if(!Clust_a_used[cluster_id]){
local_clusters <- "a" # saves info that this cluster is from dataset a
names(local_clusters) <- cluster_id # saves cluster name
#local_genes <- list(cluster_id = "") # creates empty entry for all genes in the cluster
i <- 1
while(i <= length(local_clusters)){
curr_clust <- names(local_clusters)[i]
if(local_clusters[i] == "a"){
#curr_genes <- c(setdiff(c(local_clust_a_list[[curr_clust]]), local_genes[[curr_clust]])) # genes that are in the cluster but have not been looked at yet
#print(curr_genes)
if(length(which(match_df$query_clust == curr_clust)) != 0){
new_clusters <- match_df$target_clust[which(match_df$query_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "b"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
else{ # is from dataset b
if(length(which(match_df$target_clust == curr_clust)) != 0){
new_clusters <- match_df$query_clust[which(match_df$target_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "a"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
i <- i + 1
}
Clust_a_used[names(local_clusters[which(local_clusters == "a")])] <- TRUE # makes sure to not iterate over clusters later that have already been assigned to global clusters
#print(local_clusters)
consensus_gene_clusters_both[[i_help]] <- names(local_clusters) # saves all clusters (from a and b) to consensus cluster
consensus_gene_clusters_a[[i_help]] <- names(local_clusters[which(local_clusters == "a")])
consensus_gene_clusters_b[[i_help]] <- names(local_clusters[which(local_clusters == "b")])
i_help <- i_help + 1
}
}
return(list(consensus_gene_clusters_both, consensus_gene_clusters_a, consensus_gene_clusters_b))
}
consensus_clusters_Mass_ggC_gCOG_return <- CreateConsensusClusters_bycluster(match_df = AllHits_Mass_ggC_gCOG_filterfident_unique)
consensus_clusters_Mass_ggC_gCOG_both <- consensus_clusters_Mass_ggC_gCOG_return[[1]]
consensus_clusters_Mass_ggC <- consensus_clusters_Mass_ggC_gCOG_return[[2]]
consensus_clusters_Mass_gCOG <- consensus_clusters_Mass_ggC_gCOG_return[[3]]
consensus_clusters_Mass_ggC_gCOG_both_match <- consensus_clusters_Mass_ggC_gCOG_both[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_ggC_match <- consensus_clusters_Mass_ggC[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_gCOG_match <- consensus_clusters_Mass_gCOG[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
#compute gene freqs
consensus_gene_clusters_ggC_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
consensus_gene_clusters_COG_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
for (i in 1:length(consensus_clusters_Mass_ggC_gCOG_both_match)) {
consensus_gene_clusters_ggC_freqs[i] <- min(1,sum(Mass_ggC_all_gene_freqs_dict[sapply(consensus_clusters_Mass_ggC_match[[i]], replace_minus)]))
consensus_gene_clusters_COG_freqs[i] <- min(1,sum(Mass_cog_all_gene_freqs_dict[consensus_clusters_Mass_gCOG_match[[i]]]))
}
#plot them!
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity", ylim = c(0,1), xlim = c(0,1))
abline(0,1)
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030")
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030",ylim = c(0,1), xlim = c(0,1))
abline(0,1)
length(which(abs(consensus_gene_clusters_ggC_freqs - consensus_gene_clusters_COG_freqs)>0.05))
# 105
length(which(abs(consensus_gene_clusters_ggC_freqs - consensus_gene_clusters_COG_freqs)<=0.05))
34/595
intersect(which(consensus_gene_clusters_ggC_freqs > 0.95), which(consensus_gene_clusters_COG_freqs < 0.05)
)
intersect(which(consensus_gene_clusters_ggC_freqs > 0.95), which(consensus_gene_clusters_COG_freqs < 0.05))
consensus_clusters_Mass_ggC_match[133]
SPARC1_CLS00647
View(gene_presence_absence_2001)
View(cls_files)
ggCaller_gene_presence_absence$V3[1617]
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG$fident >= 0.7),]
View(AllHits_Mass_ggC_gCOG_filterfident)
AllHits_Mass_ggC_gCOG_filterfident$query_clust <- SeqsClust_Mass_ggC_dict[AllHits_Mass_ggC_gCOG_filterfident$query]
AllHits_Mass_ggC_gCOG_filterfident$target_clust <- SeqsClust_Mass_gCOG_dict[AllHits_Mass_ggC_gCOG_filterfident$target]
AllHits_Mass_ggC_gCOG_filterfident$combined_clust <- paste(AllHits_Mass_ggC_gCOG_filterfident$query_clust, AllHits_Mass_ggC_gCOG_filterfident$target_clust)
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG[which(AllHits_Mass_ggC_gCOG$fident >= 0.7),]
AllHits_Mass_ggC_gCOG_filterfident_len1 <- AllHits_Mass_ggC_gCOG_filterfident[which(AllHits_Mass_ggC_gCOG_filterfident$qlen/AllHits_Mass_ggC_gCOG_filterfident$tlen  >= 0.6),]
AllHits_Mass_ggC_gCOG_filterfident_len <- AllHits_Mass_ggC_gCOG_filterfident_len1[which(AllHits_Mass_ggC_gCOG_filterfident_len1$tlen/AllHits_Mass_ggC_gCOG_filterfident_len1$qlen  >= 0.6),]
AllHits_Mass_ggC_gCOG_filterfident <- AllHits_Mass_ggC_gCOG_filterfident_len
AllHits_Mass_ggC_gCOG_filterfident$query_clust <- SeqsClust_Mass_ggC_dict[AllHits_Mass_ggC_gCOG_filterfident$query]
AllHits_Mass_ggC_gCOG_filterfident$target_clust <- SeqsClust_Mass_gCOG_dict[AllHits_Mass_ggC_gCOG_filterfident$target]
AllHits_Mass_ggC_gCOG_filterfident$combined_clust <- paste(AllHits_Mass_ggC_gCOG_filterfident$query_clust, AllHits_Mass_ggC_gCOG_filterfident$target_clust)
length(AllHits_Mass_ggC_gCOG_filterfident$combined_clust)
#[1] 611133
# filtered by length 50% 20050
length(unique(AllHits_Mass_ggC_gCOG_filterfident$combined_clust))
#[1] 5843
# filtered by length 50% 1743
AllHits_Mass_ggC_gCOG_filterfident_unique <- AllHits_Mass_ggC_gCOG_filterfident[!duplicated(AllHits_Mass_ggC_gCOG_filterfident$combined_clust), ]
CreateConsensusClusters_bycluster <- function(match_df){
# create empty list of consensus gene clusters
consensus_gene_clusters_both <- list()
consensus_gene_clusters_a <- list()
consensus_gene_clusters_b <- list()
# save which clusters have already been clustered
Clust_a_used <- rep(FALSE, nrow(match_df))
names(Clust_a_used) <- match_df$query_clust
#Clust_b_used <- rep(FALSE, length(local_clust_b_list))
#names(Clust_b_used) <- names(local_clust_b_list)
#
#local_genes <- list()
#local_clusters <- c()
i_help <- 1 # keeps track of number of consensus clusters
for (cluster_id in match_df$query_clust) {
if(!Clust_a_used[cluster_id]){
local_clusters <- "a" # saves info that this cluster is from dataset a
names(local_clusters) <- cluster_id # saves cluster name
#local_genes <- list(cluster_id = "") # creates empty entry for all genes in the cluster
i <- 1
while(i <= length(local_clusters)){
curr_clust <- names(local_clusters)[i]
if(local_clusters[i] == "a"){
#curr_genes <- c(setdiff(c(local_clust_a_list[[curr_clust]]), local_genes[[curr_clust]])) # genes that are in the cluster but have not been looked at yet
#print(curr_genes)
if(length(which(match_df$query_clust == curr_clust)) != 0){
new_clusters <- match_df$target_clust[which(match_df$query_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "b"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
else{ # is from dataset b
if(length(which(match_df$target_clust == curr_clust)) != 0){
new_clusters <- match_df$query_clust[which(match_df$target_clust == curr_clust)]
for (k in 1:length(new_clusters)) {
new_clust <- new_clusters[k]
#print(new_gene)
#new_clust <- seq_clust_dict_b[new_gene]
#print(new_clust)
local_clusters[new_clust] <- "a"
#local_genes[[new_clust]] <- c(local_genes[[new_clust]], new_gene)
}
}
}
i <- i + 1
}
Clust_a_used[names(local_clusters[which(local_clusters == "a")])] <- TRUE # makes sure to not iterate over clusters later that have already been assigned to global clusters
#print(local_clusters)
consensus_gene_clusters_both[[i_help]] <- names(local_clusters) # saves all clusters (from a and b) to consensus cluster
consensus_gene_clusters_a[[i_help]] <- names(local_clusters[which(local_clusters == "a")])
consensus_gene_clusters_b[[i_help]] <- names(local_clusters[which(local_clusters == "b")])
i_help <- i_help + 1
}
}
return(list(consensus_gene_clusters_both, consensus_gene_clusters_a, consensus_gene_clusters_b))
}
consensus_clusters_Mass_ggC_gCOG_return <- CreateConsensusClusters_bycluster(match_df = AllHits_Mass_ggC_gCOG_filterfident_unique)
consensus_clusters_Mass_ggC_gCOG_both <- consensus_clusters_Mass_ggC_gCOG_return[[1]]
consensus_clusters_Mass_ggC <- consensus_clusters_Mass_ggC_gCOG_return[[2]]
consensus_clusters_Mass_gCOG <- consensus_clusters_Mass_ggC_gCOG_return[[3]]
consensus_clusters_Mass_ggC_gCOG_both_match <- consensus_clusters_Mass_ggC_gCOG_both[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_ggC_match <- consensus_clusters_Mass_ggC[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
consensus_clusters_Mass_gCOG_match <- consensus_clusters_Mass_gCOG[which(lengths(consensus_clusters_Mass_ggC_gCOG_both)>1)]
#compute gene freqs
consensus_gene_clusters_ggC_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
consensus_gene_clusters_COG_freqs <- rep(0, length(consensus_clusters_Mass_ggC_gCOG_both_match))
for (i in 1:length(consensus_clusters_Mass_ggC_gCOG_both_match)) {
consensus_gene_clusters_ggC_freqs[i] <- min(1,sum(Mass_ggC_all_gene_freqs_dict[sapply(consensus_clusters_Mass_ggC_match[[i]], replace_minus)]))
consensus_gene_clusters_COG_freqs[i] <- min(1,sum(Mass_cog_all_gene_freqs_dict[consensus_clusters_Mass_gCOG_match[[i]]]))
}
#plot them!
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity", ylim = c(0,1), xlim = c(0,1))
abline(0,1)
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030")
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030",ylim = c(0,1), xlim = c(0,1))
abline(0,1)
length(which(abs(consensus_gene_clusters_ggC_freqs - consensus_gene_clusters_COG_freqs)>0.05))
# 105
length(which(abs(consensus_gene_clusters_ggC_freqs - consensus_gene_clusters_COG_freqs)<=0.05))
63/801
#plot them!
par(pty="s")
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, xlab = "Mass ggCaller gene frequencies", ylab = "Mass COG gene frequencies",main="All Gene Frequencies, 95% sequence identity", ylim = c(0,1), xlim = c(0,1))
abline(0,1)
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030")
plot(consensus_gene_clusters_ggC_freqs, consensus_gene_clusters_COG_freqs, pch = 19, col = "#00000030",ylim = c(0,1), xlim = c(0,1))
abline(0,1)
