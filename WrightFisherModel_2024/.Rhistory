det_mcmc1 <- coda::as.mcmc(cbind(det_pmcmc_run$probabilities, det_pmcmc_run$pars))
#pdf(file = paste(output_filename,"4param_det_mcmc1.pdf",sep = "_"),   # The directory you want to save the file in
#    width = 6, # The width of the plot in inches
#    height = 12)
#plot(det_mcmc1)
#dev.off()
print("det_mcmc_1 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_1 mean log likelihood")
mean(processed_chains$probabilities[,2])
det_proposal_matrix <- cov(processed_chains$pars)
det_mcmc_pars <- mcstate::pmcmc_parameters$new(list(mcstate::pmcmc_parameter("sigma_f", parameter_mean_hpd[1], min = -1000, max = 0), mcstate::pmcmc_parameter("prop_f", parameter_mean_hpd[2], min = 0, max = 1),mcstate::pmcmc_parameter("m", parameter_mean_hpd[3], min = -1000, max = 0), mcstate::pmcmc_parameter("v", parameter_mean_hpd[4], min = 0, max = 1)), det_proposal_matrix, make_transform(complex_params))
det_filter <- particle_deterministic$new(data = fitting_data,
model = WF,
index = index,
compare = combined_compare)
n_steps <- 5
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 1)
det_pmcmc_run <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
n_steps <- 5000
#n_steps <- 2000
n_burnin <- 0
control <- mcstate::pmcmc_control(
n_steps,
save_state = TRUE,
save_trajectories = TRUE,
progress = TRUE,
adaptive_proposal = TRUE,
n_chains = 4, n_workers = 4, n_threads_total = 4)
det_pmcmc_run2 <- mcstate::pmcmc(det_mcmc_pars, det_filter, control = control)
processed_chains <- mcstate::pmcmc_thin(det_pmcmc_run2, burnin = 500, thin = 1)
parameter_mean_hpd <- apply(processed_chains$pars, 2, mean)
print(parameter_mean_hpd)
par(mfrow = c(1,1))
det_mcmc2 <- coda::as.mcmc(cbind(processed_chains$probabilities, processed_chains$pars))
percentile95_low <- apply(det_mcmc2,2,quantile,.025)
percentile95_up <- apply(det_mcmc2,2,quantile,.975)
print("lower 95 percentile")
print(percentile95_low)
print("upper 95 percentile")
print(percentile95_up)
#pdf(file = paste(output_filename,"_4param_det_mcmc2.pdf",sep = "_"),   # The directory you want to save the file in
#    width = 6, # The width of the plot in inches
#    height = 12)
plot(det_mcmc2)
#dev.off()
print("det_mcmc_2 final log likelihood")
processed_chains$probabilities[nrow(processed_chains$probabilities),2]
print("det_mcmc_2 mean log likelihood")
mean(processed_chains$probabilities[,2])
return(det_pmcmc_run2)
}
#simulated_data_long_filtered <- simulated_data_long[[((0:19)*12)+1]]
#fitting_test_data <- data.frame("year" = 1:19, t(sapply(simulated_data, rowSums))[-1,])
fitting_test_data <- data.frame("year" = 1:19, t(simulated_data_over_time_filtered)[-1,])
names(fitting_test_data) <- c("year", as.character(1:20))
fitting_test_data_2 <- mcstate::particle_filter_data(data = fitting_test_data,
time = "year",
rate = 1 / dt_test,
initial_time = 0)
fitting_test_params <- list(species_no = species_no_test, Pop_ini = Pop_ini_test, Pop_eq = rowSums(Pop_ini_test_mtx), Genotypes = Genotypes_test, capacity = sum(Pop_ini_test_mtx), delta = delta_test, vaccTypes = vaccTypes_test_mtx, gene_no = gene_no_test, vacc_time = 4, dt = dt_test, pmcmc_sigma_w = -1000, migVec = (migMatr_test), sero_no = sero_no_test)
MCMC_chain_sample1year_run <- Fit_model_to_sim_data(fitting_data = fitting_test_data_2, fitting_params = fitting_test_params)
processed_chains_1year <- mcstate::pmcmc_thin(MCMC_chain_sample1year_run, burnin = 1000, thin = 2)
MCMC_chain_sample1year <- coda::as.mcmc(cbind(processed_chains_1year$probabilities, processed_chains_1year$pars))
mean_sample1year <- apply(MCMC_chain_sample1year,2,mean)
percentile95_low_sample1year <- apply(MCMC_chain_sample1year,2,quantile,.025)
percentile95_up_sample1year <- apply(MCMC_chain_sample1year,2,quantile,.975)
mean_sample1year
percentile95_low_sample1year <- apply(MCMC_chain_sample1year,2,quantile,.025)
percentile95_up_sample1year <- apply(MCMC_chain_sample1year,2,quantile,.975)
#mcmc_test_obj_1 <- coda::as.mcmc(mcmc_test_obj[1:90,])
#mcmc_test_obj_2 <- coda::as.mcmc(mcmc_test_obj[91:180,])
#mcmc_test_obj_3 <- coda::as.mcmc(mcmc_test_obj[181:270,])
#mcmc_test_obj_4 <- coda::as.mcmc(mcmc_test_obj[271:360,])
#mcmc_test_list <- coda::as.mcmc.list(c(mcmc_test_obj_1, mcmc_test_obj_2,mcmc_test_obj_3,mcmc_test_obj_4))
test_list <- list()
test_list[[1]] <- coda::as.mcmc(MCMC_chain_sample1year[1:(0.25 * nrow(MCMC_chain_sample1year)),])
test_list[[2]] <- coda::as.mcmc(MCMC_chain_sample1year[((0.25 * nrow(MCMC_chain_sample1year)) +1):(0.5 * nrow(MCMC_chain_sample1year)),])
test_list[[3]] <- coda::as.mcmc(MCMC_chain_sample1year[((0.5 * nrow(MCMC_chain_sample1year)) +1):(0.75 * nrow(MCMC_chain_sample1year)),])
test_list[[4]] <- coda::as.mcmc(MCMC_chain_sample1year[((0.75 * nrow(MCMC_chain_sample1year)) +1):(nrow(MCMC_chain_sample1year)),])
mcmc_test_list <- as.mcmc.list(test_list)
plot(mcmc_test_list, trace = TRUE,density = TRUE, smooth =FALSE)
# plot the mcmc fits in boxplots
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
# create a dataset
data_1yr <- data.frame(
name=c( rep("sigma_f",length(MCMC_chain_sample1year[,4])), rep("prop_f",length(MCMC_chain_sample1year[,4])), rep("m",length(MCMC_chain_sample1year[,4])), rep('v', length(MCMC_chain_sample1year[,4]))  ),
value=c( MCMC_chain_sample1year[,4],MCMC_chain_sample1year[,5],MCMC_chain_sample1year[,6],MCMC_chain_sample1year[,7] ),
true_values = c(rep(-3.366796, length(MCMC_chain_sample1year[,4])), rep(0.28835, length(MCMC_chain_sample1year[,4])), rep(-4.319991, length(MCMC_chain_sample1year[,4])), rep(0.0814,length(MCMC_chain_sample1year[,4])))
)
data_1yr_sigma_f <- data.frame(
name=c( rep("sigma_f",length(MCMC_chain_sample1year[,4]))),
value=c( MCMC_chain_sample1year[,4]),
true_values = c(-3.366796)
)
data_1yr_prop_f <- data.frame(
name=c( rep("prop_f",length(MCMC_chain_sample1year[,4]))),
value=c( MCMC_chain_sample1year[,5]),
true_values = c(0.28835)
)
data_1yr_m <- data.frame(
name=c( rep("m",length(MCMC_chain_sample1year[,4]))),
value=c( MCMC_chain_sample1year[,6]),
true_values = c(-4.319991)
)
data_1yr_v <- data.frame(
name=c( rep("v",length(MCMC_chain_sample1year[,4]))),
value=c( MCMC_chain_sample1year[,7]),
true_values = c(0.0814)
)
# Plot
boxplot_mcmc <- function(gg_data){
ggplot(gg_data, aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
}
boxplot_mcmc(data_1yr_sigma_f) + geom_point(aes(y=true_values), colour="green")
boxplot_mcmc(data_1yr_prop_f) + geom_point(aes(y=true_values), colour="green")
boxplot_mcmc(data_1yr_m) + geom_point(aes(y=true_values), colour="green")
boxplot_mcmc(data_1yr_v) + geom_point(aes(y=true_values), colour="green")
3800/60
Mass_UK_mmseq_clusters_50_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/mmseqs_cluster_Mass_UK/ggC_Mass_UK_Cluster_out.tsv", header=FALSE)
View(Mass_UK_mmseq_clusters_50_panaroo)
Mass_UK_50_ground_truth <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/Mass_UK_joined/headers.tsv", header=FALSE)
#Mass_ggC_clusters_50 <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/benchmark_mmseqs/Mass_50samples.tsv", header=FALSE)
#UK_ggC_clusters_50 <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/benchmark_mmseqs/UK_50samples.tsv", header=FALSE)
Mass_UK_50_ground_truth_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_Mass_UK/gene_presence_absence.csv", header=FALSE)
View(Mass_UK_50_ground_truth_panaroo)
gene_presence_absence <- read.csv("~/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_Mass_UK/gene_presence_absence.csv")
View(gene_presence_absence)
#Mass_ggC_clusters_50 <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/benchmark_mmseqs/Mass_50samples.tsv", header=FALSE)
#UK_ggC_clusters_50 <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/benchmark_mmseqs/UK_50samples.tsv", header=FALSE)
Mass_UK_50_ground_truth_panaroo <- read.csv("~/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_Mass_UK/gene_presence_absence.csv")
View(Mass_UK_50_ground_truth_panaroo)
Mass_clusters_50_panaroo <- read.csv("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_Mass/gene_presence_absence.csv")
UK_clusters_50_panaroo <- read.csv("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_UK/gene_presence_absence.csv")
View(Mass_clusters_50_panaroo)
# calculate binary presence absence matrix
Mass_clusters_50_panaroo2 <- Mass_clusters_50_panaroo[,c(-2,-3)]
Mass_clusters_50_panaroo_bin[-1,-1] <- apply(Mass_clusters_50_panaroo2[-1,-1],c(1,2), convert_to_bool)
# calculate binary presence absence matrix
Mass_clusters_50_panaroo_bin <- Mass_clusters_50_panaroo[,c(-2,-3)]
Mass_clusters_50_panaroo_bin[-1,-1] <- apply(Mass_clusters_50_panaroo_bin[-1,-1],c(1,2), convert_to_bool)
UK_clusters_50_panaroo_bin <- UK_clusters_50_panaroo[,c(-2,-3)]
UK_clusters_50_panaroo_bin[-1,-1] <- apply(UK_clusters_50_panaroo_bin[-1,-1],c(1,2), convert_to_bool)
View(Mass_clusters_50_panaroo_bin)
# create a list dictionary with cluster names and presence-absence vectors as content
Mass_ggCaller_gene_presence_absence_listdict_50_panaroo <- list()
for (i in 2:nrow(Mass_clusters_50_panaroo_bin)) {
Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[Mass_clusters_50_panaroo_bin[i,1]]] <- as.integer(Mass_clusters_50_panaroo_bin[i,-1])
}
UK_ggCaller_gene_presence_absence_listdict_50_panaroo <- list()
for (i in 2:nrow(UK_clusters_50_panaroo_bin)) {
UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[UK_clusters_50_panaroo_bin[i,1]]] <- as.integer(UK_clusters_50_panaroo_bin[i,-1])
}
head(Mass_ggCaller_gene_presence_absence_listdict_50_panaroo)
# compute cluster freqs
Mass_clusters_50_panaroo_freqs <- rowSums(Mass_clusters_50_panaroo[-1,-1])
Mass_clusters_50_panaroo_bin <- as.integer(Mass_clusters_50_panaroo_bin)
# calculate binary presence absence matrix
Mass_clusters_50_panaroo_bin <- Mass_clusters_50_panaroo[,c(-2,-3)]
Mass_clusters_50_panaroo_bin[-1,-1] <- apply(Mass_clusters_50_panaroo_bin[-1,-1],c(1,2), convert_to_bool)
Mass_clusters_50_panaroo_bin <- as.integer(Mass_clusters_50_panaroo_bin)
Mass_clusters_50_panaroo_bin_int <- as.integer(Mass_clusters_50_panaroo_bin[-1,-1])
Mass_clusters_50_panaroo_bin_int <- sapply(Mass_clusters_50_panaroo_bin[-1,-1],as.integer)
head(Mass_clusters_50_panaroo_bin_int)
# compute cluster freqs
Mass_clusters_50_panaroo_freqs <- rowSums(Mass_clusters_50_panaroo_bin_int)
length(Mass_clusters_50_panaroo_freqs)
names(Mass_clusters_50_panaroo_freqs) <- Mass_clusters_50_panaroo_bin[,1]
names(Mass_clusters_50_panaroo_freqs) <- Mass_clusters_50_panaroo_bin[-1,1]
head(Mass_clusters_50_panaroo_freqs)
# compute cluster freqs
Mass_clusters_50_panaroo_freqs <- rowSums(Mass_clusters_50_panaroo_bin_int)/50
names(Mass_clusters_50_panaroo_freqs) <- Mass_clusters_50_panaroo_bin[-1,1]
head(Mass_clusters_50_panaroo_freqs)
tail(Mass_clusters_50_panaroo_freqs)
UK_clusters_50_panaroo_bin <- UK_clusters_50_panaroo[,c(-2,-3)]
UK_clusters_50_panaroo_bin[-1,-1] <- apply(UK_clusters_50_panaroo_bin[-1,-1],c(1,2), convert_to_bool)
UK_clusters_50_panaroo_bin_int <- sapply(UK_clusters_50_panaroo_bin[-1,-1],as.integer)
UK_clusters_50_panaroo_freqs <- rowSums(UK_clusters_50_panaroo_bin_int)/50
UK_clusters_50_panaroo_freqs <- rowSums(UK_clusters_50_panaroo_bin_int)/50
names(UK_clusters_50_panaroo_freqs) <- sapply(UK_clusters_50_panaroo_bin[-1,-1],as.integer)
UK_clusters_50_panaroo <- read.csv("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_UK/gene_presence_absence.csv")
UK_clusters_50_panaroo_bin <- UK_clusters_50_panaroo[,c(-2,-3)]
UK_clusters_50_panaroo_bin[-1,-1] <- apply(UK_clusters_50_panaroo_bin[-1,-1],c(1,2), convert_to_bool)
UK_clusters_50_panaroo_bin_int <- sapply(UK_clusters_50_panaroo_bin[-1,-1],as.integer)
dim(UK_clusters_50_panaroo_bin)
UK_clusters_50_panaroo_freqs <- rowSums(UK_clusters_50_panaroo_bin_int)/50
names(UK_clusters_50_panaroo_freqs) <- sapply(UK_clusters_50_panaroo_bin[-1,-1],as.integer)
dim(UK_clusters_50_panaroo_bin_int)
length(UK_clusters_50_panaroo_freqs)
names(UK_clusters_50_panaroo_freqs) <- UK_clusters_50_panaroo_bin[-1,1]
head(UK_clusters_50_panaroo_freqs)
head(Mass_clusters_50_panaroo)
#dictionary that says whether a cluster element is from UK or Mass
Mass_or_UK_gene_dict_50 <- c()
Mass_or_UK_gene_dict_50[Mass_clusters_50_panaroo$Gene] <- "Mass"
Mass_or_UK_gene_dict_50[UK_clusters_50_panaroo$Gene] <- "UK"
head(Mass_or_UK_gene_dict_50)
View(Mass_clusters_50_panaroo)
View(UK_clusters_50_panaroo)
Mass_subclusters_reps_50_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_Mass/SubclusterRepsWithCluster.tsv", header=FALSE)
UK_subclusters_reps_50_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_UK/SubclusterRepsWithCluster.tsv", header=FALSE)
View(Mass_subclusters_reps_50_panaroo)
Mass_subclusters_reps_50_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_Mass/SubclusterRepsWithCluster.tsv", header=FALSE)
UK_subclusters_reps_50_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/panaroo_UK/SubclusterRepsWithCluster.tsv", header=FALSE)
#dictionary that says whether a cluster element is from UK or Mass
# this does not work anymore because group names are
Mass_or_UK_gene_dict_50 <- c()
Mass_or_UK_gene_dict_50[Mass_subclusters_reps_50_panaroo$V1] <- "Mass"
Mass_or_UK_gene_dict_50[UK_subclusters_reps_50_panaroo$V1] <- "UK"
head(Mass_or_UK_gene_dict_50)
# matches gene with its corresponding Mass cluster
Mass_gene_clust_dict_50 <- Mass_subclusters_reps_50_panaroo$V2
names(Mass_gene_clust_dict_50) <- Mass_subclusters_reps_50_panaroo$V1
# matches gene with its corresponding UK cluster
UK_gene_clust_dict_50 <- UK_subclusters_reps_50_panaroo$V2
names(UK_gene_clust_dict_50) <- UK_subclusters_reps_50_panaroo$V1
Mass_UK_mmseq_clusters_50_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/mmseqs_cluster_Mass_UK/ggC_Mass_UK_Cluster_out_split.tsv", header=FALSE)
#iterate over mmseqs output
mmseqs_dict <- list()
names(mmseqs_dict) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
#iterate over mmseqs output
mmseqs_dict <- vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
head(mmseqs_dict)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
mmseqs_dict[[clust_name]] <- c(mmseqs_dict[[clust_name]],  Mass_UK_mmseq_clusters_50_panaroo$V2[i],  Mass_UK_mmseq_clusters_50_panaroo$V4[i])
}
head(mmseqs_dict)
head(Mass_ggCaller_gene_presence_absence_listdict_50_panaroo)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- unique(mmseqs_dict[[clust_name]] )
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (i in clusters) {
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[i]]
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[i]]
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
head(mmseqs_dict_freqs_Mass)
head(mmseqs_dict_freqs_UK)
names(mmseqs_dict_freqs_Mass)
head(names(mmseqs_dict_freqs_Mass))
head(names(mmseqs_dict_freqs_UK))
plot(mmseqs_dict_freqs_Mass)
length(mmseqs_dict_freqs_Mass)
plot(1:4345,mmseqs_dict_freqs_Mass)
plot(mmseqs_dict_freqs_Mass,mmseqs_dict_freqs_UK)
head(mmseqs_dict_freqs_Mass)
head(mmseqs_dict_freqs_UK)
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- unique(mmseqs_dict[[clust_name]] )
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (j in clusters) {
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[j]]
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[j]]
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
plot(mmseqs_dict_freqs_Mass,mmseqs_dict_freqs_UK)
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- unique(mmseqs_dict[[clust_name]] )
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (j in clusters) {
print(j)
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[j]]
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[j]]
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- unique(mmseqs_dict[[clust_name]] )
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (j in clusters) {
#print(j)
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[j]]
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[j]]
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
Mass_UK_mmseq_clusters_50_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/mmseqs_cluster_Mass_UK/ggC_Mass_UK_Cluster_out_seqidmode2_split.tsv", header=FALSE)
#iterate over mmseqs output
mmseqs_dict <- vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
cluster <- c(Mass_UK_mmseq_clusters_50_panaroo$V2[i],  Mass_UK_mmseq_clusters_50_panaroo$V4[i])
names(cluster) <- c(Mass_UK_mmseq_clusters_50_panaroo$V1[i],  Mass_UK_mmseq_clusters_50_panaroo$V3[i])
mmseqs_dict[[clust_name]] <- c(mmseqs_dict[[clust_name]], cluster)
}
head(mmseqs_dict)
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- mmseqs_dict[[clust_name]]
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (gene in names(cluster)) {
#print(j)
if(Mass_or_UK_gene_dict_50[[gene]]=="Mass"){
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters(gene)]]
}
else if(Mass_or_UK_gene_dict_50[[gene]]=="UK"){
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters(gene)]]
}
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- mmseqs_dict[[clust_name]]
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (gene in names(cluster)) {
#print(j)
if(Mass_or_UK_gene_dict_50[[gene]]=="Mass"){
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
else if(Mass_or_UK_gene_dict_50[[gene]]=="UK"){
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
plot(mmseqs_dict_freqs_Mass,mmseqs_dict_freqs_UK)
head(Mass_or_UK_gene_dict_50)
head(mmseqs_dict_freqs_Mass)
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- mmseqs_dict[[clust_name]]
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (gene in names(cluster)) {
#print(j)
if(Mass_or_UK_gene_dict_50[gene]=="Mass"){
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
else if(Mass_or_UK_gene_dict_50[gene]=="UK"){
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
plot(mmseqs_dict_freqs_Mass,mmseqs_dict_freqs_UK)
head(mmseqs_dict_freqs_Mass)
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- mmseqs_dict[[clust_name]]
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (gene in names(cluster)) {
print(gene)
if(Mass_or_UK_gene_dict_50[gene]=="Mass"){
print("Mass")
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
else if(Mass_or_UK_gene_dict_50[gene]=="UK"){
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- mmseqs_dict[[clust_name]]
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (gene in names(cluster)) {
#print(gene)
if(Mass_or_UK_gene_dict_50[gene]=="Mass"){
#print("Mass")
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
print(sum(Mass_sum))
}
else if(Mass_or_UK_gene_dict_50[gene]=="UK"){
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
head(Mass_ggCaller_gene_presence_absence_listdict_50_panaroo)
head(mmseqs_dict)
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- mmseqs_dict[[clust_name]]
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (gene in names(cluster)) {
#print(gene)
if(Mass_or_UK_gene_dict_50[gene]=="Mass"){
#print("Mass")
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
print(clusters[gene])
}
else if(Mass_or_UK_gene_dict_50[gene]=="UK"){
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
mmseqs_dict_freqs_Mass <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_Mass) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
mmseqs_dict_freqs_UK <-  vector("list", length = length(unique(Mass_UK_mmseq_clusters_50_panaroo$V1)))
names(mmseqs_dict_freqs_UK) <- unique(Mass_UK_mmseq_clusters_50_panaroo$V1)
for (i in 1:nrow(Mass_UK_mmseq_clusters_50_panaroo)) {
clust_name <- Mass_UK_mmseq_clusters_50_panaroo$V1[i]
clusters <- mmseqs_dict[[clust_name]]
Mass_sum <- rep(0,50)
UK_sum <- rep(0,50)
for (gene in names(clusters)) {
#print(gene)
if(Mass_or_UK_gene_dict_50[gene]=="Mass"){
#print("Mass")
Mass_sum <- Mass_sum | Mass_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
#print(clusters[gene])
}
else if(Mass_or_UK_gene_dict_50[gene]=="UK"){
UK_sum <- UK_sum | UK_ggCaller_gene_presence_absence_listdict_50_panaroo[[clusters[gene]]]
}
}
mmseqs_dict_freqs_Mass[[clust_name]] <- sum(Mass_sum)/50
mmseqs_dict_freqs_UK[[clust_name]] <- sum(UK_sum)/50
}
plot(mmseqs_dict_freqs_Mass,mmseqs_dict_freqs_UK)
Mass_UK_mmseq_search_50_panaroo <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/mmseqs_search_Mass_UK/ggC_Mass_UK_Search_out.m8", header=FALSE)
View(Mass_UK_mmseq_search_50_panaroo)
Mass_UK_50_ground_truth_panaroo[2682,1]
Mass_UK_50_ground_truth_panaroo[2682,which(Mass_UK_50_ground_truth_panaroo[2682,-1] != "")]
Mass_UK_mmseq_search_50_panaroo_relaxed <- read.delim("/Users/llorenz/Documents/PhD_Project/Data/Mapping_ggCaller/JoinedMassUK_ggCallerRun/using_panaroo/mmseqs_search_Mass_UK/ggC_Mass_UK_Search_out_relaxed.m8", header=FALSE)
View(Mass_UK_mmseq_search_50_panaroo_relaxed)
View(Mass_UK_mmseq_search_50_panaroo_relaxed)
View(Mass_UK_mmseq_search_50_panaroo_relaxed)
